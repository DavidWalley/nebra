// lunascope.ssc - Stellarium script for checking Nebra calendar and generating sky disc views. v015
// Name: Lunascope
// License: (c)2024 David C. Walley
// Author: David C. Walley
// Version: 0.1
// Description: Daily Lunar Horoscope

// Start stellarium
// In a UBUNTU terminal (ctrl+alt+T):
// cd ~/Desktop/AAA/hey_diddle/code/nebra && haxe --neko TEMP_neko.n --main ToolChain_lunascope && neko TEMP_neko.n DUMMYdATA && sleep 1 && wmctrl -a 'Stellarium 24.3' # Run this file and switch to open STELLARIUM window.
// cd ~/Desktop/AAA/hey_diddle/lunascope  && for i in scr_*.png; do convert "$i"  -fuzz 25% -transparent black trans_$i; done # TRANSPARENT
// cd ~/Desktop/AAA/hey_diddle/lunascope  && haxe --neko TEMP_neko.n --main Lunascope_svg && neko TEMP_neko.n DUMMYdATA && sleep 1 && wmctrl -a 'lunascope.svg' # CREATE SVG

// PNGs can be output and converted to video with ffmpeg.
// cd /home/dave/Desktop/AAA/hey_diddle/lunascope/screens/ && ls -l
// ffmpeg -f image2 -r 25 -pattern_type glob -i './scr_*.png' -vcodec libx264 -crf 22 a_001.mp4
//             -rtsp_transport tcp

//. 1) 51.5 degree latitude - Nebra and Stonehenge share this latitude. What is special about it?
//.                         - At this latitude, Vega on the edge of the circumpolar stars, kisses horizon.
//.                         - Bottom arc appears to correspond to Vega's path around winter solstice.
//.                         - Tilt of arc consistent with path on winter solstice night, kissing horizon near (but after) midnight.
//.                         - Capella is only other circumpolar star close to Vega's brightness.
//.                         - Capella does not reach horizon but comes close, path is closer to upper edge of arc.
//.                         - Capella comes close near summer solstice - opposite of Vega in sky and seasons.
//.                         - Lines in arc might represent other geographic locations, other centuries, or other (dimmer) stars
//. 2) Pleiades cluster     - broad agreement.
//.                         - size consistent with size of full moon.
//.                         - High in sky in winter, not visible in summer.
//. 3) Rotate and scale     - use Pleiades as common pivot point, although any of the dots in cluster might be the pivot.
//.                         - Dots roughly align to Aldeberan and other Taurus stars, Aires and eastern fish of Pisces.
//.                         - left half of disc does not show any good alignments.
//. 4) Plot Moon's ecliptic - southern edge through center of full moon, northern edge is tangent.
//. 5) Some stars on edge   - 2, 26, 30 are not as bright, but might be chosen to define Moon's ecliptic
//. 6) Crescent to Full     - Implies time period of about 7 or 8 days, from last crescent to full
//.                         - Implies voyage across celestial sphere.
//.                         - Near winter solstice, this voyage is from Pisces to Taurus or Gemini.


//const                 g_sPATHsHOTS    = "/home/dave/Desktop/AAA/hey_diddle/code/nebra/";              //>
  const                 g_sPATHsHOTS    = "/home/dave/Desktop/AAA/hey_diddle/lunascope/" ;              //>

  const                 g_a2vDOTS = //   0 1               2                     3         4     5      //> COPIED TO Lunascope_svg.hx
      // (x,y) of dots       star name             desig      view  double duty info                    //> Table of Nebra Sky Disc dots and associated stars:
      [[ 108.1498 ,18.1577  ,""                   ,"HR 1656" ,"p"                         ]             //> 1 m Tau
      ,[ 126.3757 ,25.09133 ,""                   ,"HR 1554" ,"p"                         ]             //> 2
      ,[ 70.83071 ,28.24098 ,""                   ,"HR 2891" , "g"                        ]             //> 3
      ,[ 96.88832 ,31.32991 ,"Aldebaran"          ,"HR 1457" ,"p"                         ]             //> 4
      ,[ 57.53873 ,40.46251 ,""                   ,"HR 2905" , "g"                        ]             //> 5
      ,[ 83.44666 ,46.62984 ,""                   ,"HR 1239" ,"pg" ,""         ,"HR 2697" ]             //> 6
      ,[ 112.1699 ,46.02002 ,""                   ,"HR 1256" ,"pg" ,""         ,"HR 2540" ]             //> 7
      ,[ 124.5944 ,40.92313 ,"Pleiades: Asterope" ,"HR 1151" ,"P"                         ]             //> 8
      ,[ 121.0292 ,48.75188 ,"Pleiades: Maia"     ,"HR 1149" ,"P"                         ]             //> 9
      ,[ 131.831  ,50.85698 ,"Atik"               ,"HR 1203" ,"p"                         ]             //> 10
      ,[ 112.4277 ,54.75468 ,"Pleiades: Alcyone"  ,"HR 1165" ,"P"                         ]             //> 11
      ,[ 128.7177 ,58.49874 ,"Pleiades: Electra"  ,"HR 1142" ,"P"                         ]             //> 12
      ,[ 120.2459 ,61.54713 ,"Pleiades: Merope"   ,"HR 1156" ,"P"                         ]             //> 13
      ,[ 154.2186 ,44.34876 ,""                   ,""        ,""                          ]             //> 14
      ,[ 53.85233 ,64.36998 ,""                   ,"HR 2777" , "g"                        ]             //> 15
      ,[ 35.4     ,81.51411 ,""                   ,"HR 2763" , "g"                        ]             //> 16
      ,[ 38.3646  ,81.51411 ,""                   ,""        ,""                          ]             //> 17
      ,[ 123.5546 ,81.93696 ,"Bahrani"            ,"HR 838"  ,"p"                         ]             //> 18
      ,[ 141.7191 ,78.15144 ,""                   ,"HR 840"  ,"p"                         ]             //> 19
      ,[ 50.30947 ,98.89025 ,""                   ,"HR 2615" , "g"                        ]             //> 20
      ,[ 119.1031 ,102.6168 ,"Hamal"              ,"HR 617"  ,"p"                         ]             //> 21
      ,[ 47.5255  ,118.5022 ,""                   ,"HR 2484" , "g"                        ]             //> 22
      ,[ 70.8448  ,117.6285 ,""                   ,"HR 489"  ,"pg" ,"Alhena"   ,"HR 2421" ]             //> 23
      ,[ 95.72604 ,118.7353 ,"Alpherg"            ,"HR 437"  ,"pg" ,""         ,"HR 2216" ]             //> 24
      ,[ 116.5119 ,127.7836 ,""                   ,"HR 360"  ,"p"                         ]             //> 25
      ,[ 139.006  ,130.4405 ,""                   ,"HR 291"  ,"p"                         ]             //> 26
      ,[ 156.8717 ,121.4289 ,""                   ,"HR 226"  ,"pg" ,"Elnath"   ,"HR 1791" ]             //> 27
      ,[ 63.38372 ,133.7863 ,""                   ,"HR 392"  ,"pg" ,""         ,"HR 2287" ]             //> 28
      ,[ 85.68202 ,138.646  ,""                   ,"HR 294"  ,"pg" ,""         ,"HR 2159" ]             //> 29
      ,[ 101.2925 ,141.9865 ,""                   ,"HR 211"  ,"pg" ,""         ,"HR 1990" ]             //> 30
      ,[ 123.8151 ,145.3032 ,"Tianguan"           ,"HR 1910" , "g"                        ]             //> 31
//    ,[ 171.1209 ,60.48165 ,""                   ,""        ,""                          ]             //> 32
//    ,[ 173.9899 ,93.61537 ,""                   ,""        ,""                          ]             //> 33
                                          ];                                                            //>
  const                 g_iDOTS_x       = 0;
  const                 g_iDOTS_y       = 1;
  const                 g_iDOTS_sName   = 2;
  const                 g_iDOTS_sId     = 3;
  const                 g_iDOTS_sView   = 4;
  const                 g_iDOTS_sName2  = 5;
  const                 g_iDOTS_sId2    = 6;

//TODO: Use this. Convert sky position and time to an altitude/azimuth pair.
//Greg Miller (gmiller@gregmiller.net) 2021
//Released as public domain     http://www.celestialprogramming.com/    https://astrogreg.com/convert_ra_dec_to_alt_az.html
function                                dEarthSpinAngle_rad(//////////////////////////////////////////////> Convert sky position and time to an altitude/azimuth pair.
                                        a_When_jdutc                                                    //>
){                                      //////////////////////////////////////////////////////////////////>
  const                                 t                       = a_When_jdutc- 2451545.0;              //> IERS Technical Note No. 32
  const                                 f                       = a_When_jdutc%1.0;                     //>
  let                                   r_rad  = 2*Math.PI*(f +0.7790572732640 +0.00273781191135448*t); //> eq 14
  r_rad %= 2*Math.PI;                                                                                   //>
  if( r_rad < 0 ){ r_rad += 2*Math.PI; }                                                                //>
return r_rad;                                                                                           //>
}//dEarthSpinAngle_rad////////////////////////////////////////////////////////////////////////////////////>
function                                dGreenwichMeanSiderealTime_rad(///////////////////////////////////>
                                        a_When_jdutc                                                    //> Time as a Julian Day date.
){                                      //////////////////////////////////////////////////////////////////>
  const                                 t               = (a_When_jdutc - 2451545.0)/36525.0;           //> "Expressions for IAU 2000 precession quantities" N. Capitaine1,P.T.Wallace2, and J. Chapront
  let                                   dGmst_rad       = dEarthSpinAngle_rad(a_When_jdutc)             //>
                                                          +(     0.014506                               //>
                                                            + 4612.156534    *t                         //>
                                                            +    1.3915817   *t*t                       //>
                                                            -    0.00000044  *t*t*t                     //>
                                                            -    0.000029956 *t*t*t*t                   //>
                                                            -    0.0000000368*t*t*t*t*t                 //>
                                                           )*Math.PI/180.0                              //>
                                                            / 60.0/60.0;                                //> eq 42
  dGmst_rad %= 2*Math.PI;                                                                               //>
  if( dGmst_rad < 0 ){ dGmst_rad += 2*Math.PI; }                                                        //>
return dGmst_rad;                                                                                       //>
}//dGreenwichMeanSiderealTime_rad/////////////////////////////////////////////////////////////////////////>
//. function                            dGreenwichMeanSiderealTime1_rad(///////////////////////////////////>
//.                                     a_When_jdutc                                                    //> Time as a Julian Day date.
//. ){                                  //////////////////////////////////////////////////////////////////>
//.   const                             d                       = a_When_jdutc - 2451545.0;             //> IERS Technical Note No. 32 eq. 14
//.   let                               e                       = d*0.000001;                           //>
//.   let                               dGmst_rad       = ( a_When_jdutc%1.0 )*2*Math.PI                //>
//.                                                      + 1.35971848071386E-02                         //>
//.                                                      + 4.83960256064601E+01 *e                      //>
//.                                                      + 1.84711251619895E+02 *e*e                    //>
//.                                                      - 1.59899495718765E-03 *e*e*e                  //>
//.                                                      - 2.98049237368634E+00 *e*e*e*e                //>
//.                                                      - 2.74455262471887E-06 *e*e*e*e*e              //>
//.                                                      ;                                              //>
//.   dGmst_rad %= 2*Math.PI;   if( dGmst_rad < 0 ){ dGmst_rad += 2*Math.PI; }                          //>
//. return dGmst_rad;                                                                                   //>
//. }//dGreenwichMeanSiderealTime1_rad////////////////////////////////////////////////////////////////////>


function SinR(a){ return Math.sin( a             ); }                                                   //> Code convenience: sin, in radians.
function CosR(a){ return Math.cos( a             ); }                                                   //> Code convenience: cos, in radians.
function TanR(a){ return Math.tan( a             ); }                                                   //> Code convenience: tan, in radians.
function SinD(a){ return Math.sin( a*Math.PI/180 ); }                                                   //> Code convenience: sin, in degrees.
function CosD(a){ return Math.cos( a*Math.PI/180 ); }                                                   //> Code convenience: cos, in degrees.
function TanD(a){ return Math.tan( a*Math.PI/180 ); }                                                   //> Code convenience: cos, in degrees.


function                                avRaDecToAltAz(///////////////////////////////////////////////////>
                                        a_Ra_rad                                                        //>
,                                       a_Dec_rad                                                       //>
,                                       a_Lat_rad                                                       //>
,                                       a_Long_rad                                                      //>
,                                       a_When_jdutc                                                    //> jd is Julian Date in UTC
){                                      //////////////////////////////////////////////////////////////////>
  const                               dGmst_rad         = dGreenwichMeanSiderealTime_rad(a_When_jdutc); //> Meeus 13.5 and 13.6, modified so West longitudes are negative and 0 is North
  let                                 localSiderealTime = (dGmst_rad + a_Long_rad)%(2*Math.PI);         //>
  let                                 H                 = localSiderealTime - a_Ra_rad;                 //>
  if(       H < 0 ){ H += 2*Math.PI; }                                                                  //>
  if( Math.PI < H ){ H -= 2*Math.PI; }                                                                  //>
  let                                   az        = Math.atan2( SinR( H       )                         //>
                                                    ,           CosR( H       )*SinR(a_Lat_rad)         //>
                                                              - TanR(a_Dec_rad)*CosR(a_Lat_rad)         //>
                                                    );                                                  //>
  let                                   a         = Math.asin(  SinR(a_Lat_rad)*SinR(a_Dec_rad)         //>
                                                              + CosR(a_Lat_rad)*CosR(a_Dec_rad)*CosR(H) //>
                                                    );                                                  //>
  az -= Math.PI;                                                                                        //>
  if( az < 0 ){ az += 2*Math.PI; }                                                                      //>
return [az,a, localSiderealTime,H];                                                                     //>
}//avRaDecToAltAz/////////////////////////////////////////////////////////////////////////////////////////>


//function                              NAP(){ core.wait(0.25); }                                       //> Short pause. Delay to allow for asynchronous updates in Stellarium.
function                                NAP(){ core.wait(0.01); }                                       //> Short pause. Delay to allow for asynchronous updates in Stellarium.


function                                Look(/////////////////////////////////////////////////////////////# Aim view at given point, with given zoom.
                                        a_Alt                                                           //>
,                                       a_Azi                                                           //>
,                                       a_Fov                                                           //> Feild of view
,                                       a_take                                                          //> Length of time to animate.
){                                      //////////////////////////////////////////////////////////////////>
  core.moveToAltAzi(      a_Alt, a_Azi ,a_take );                                                       //>
  StelMovementMgr.zoomTo( a_Fov        ,a_take );                                                       //>
  core.wait(                            a_take );                                                       //>
}//Look///////////////////////////////////////////////////////////////////////////////////////////////////>


function                                mapSelect(////////////////////////////////////////////////////////# Select a celestial object and report a map of info about it.
                                        a_sObject                                                       //> Object e.g. "Moon"
){                                      //////////////////////////////////////////////////////////////////>
  core.selectObjectByName(a_sObject ,false);                                                     NAP(); //>
  var                                   map                     = core.getSelectedObjectInfo();         //> https://stellarium.org/doc/0.15/classStelMainScriptAPI.html#a2dc0768e3a57abf27cddaebe0b52dc97
return map;                                                                                             //>
}//mapSelect//////////////////////////////////////////////////////////////////////////////////////////////>


function                                sDMS(/////////////////////////////////////////////////////////////# Convert number to text degrees-minutes-seconds. Used in LabelMgr.labelEquatorial
                                        a_dDecimalDegrees                                               //>
){                                      //////////////////////////////////////////////////////////////////>
  let                                   d                       = +a_dDecimalDegrees;                   //>
  let                                   dD                      = Math.floor(d);                        //> Get whole number of degrees.
  let                                   r_s                     = dD +"D";                              //> Start
  d = d - dD; d *= 60; dD = Math.floor(d); r_s += ( ""+(1000 +dD) ).slice(2  ) +"'";                    //>
  d = d - dD; d *= 60;                     r_s += ( ""+(1000 + d) ).slice(2,9) +'"';                    //>
return r_s;                                                                                             //>
}//sDMS///////////////////////////////////////////////////////////////////////////////////////////////////>


function                                Mark(/////////////////////////////////////////////////////////////# Place a mark on the celestial sphere.
                                        a_sObject                                                       //> Object e.g. "Moon"
,                                       a_sMarker                                                       //> Marker e.g. "cross"
,                                       a_sRgb                                                          //> color  e.g. "#ffffff"
,                                       a_dSize                                                         //>
){                                      //////////////////////////////////////////////////////////////////>
  let                                   m                       = mapSelect(a_sObject);                 //>
  core.output( a_sObject // +" "+ core.mapToString(m) );                                                //>
   +"   ,"+ m["iauConstellation"]   +" ,"+ m["localized-name"  ]   +" ,"+ m["name"            ]         //>
   +"   ,"+ m["vmag"            ]   
   +"   ,"+ m["decJ2000"        ]   +" ,"+ m["raJ2000"         ]                                        //>
   +"   ,"+ m["elatJ2000"       ]   +" ,"+ m["elongJ2000"      ]   +" ,"+ m["hourAngle-dd"    ]         //>
  );                                                                                                    //>
  let                                   s                       = ""+ a_sMarker;                        //>
  switch( s ){                                                                                          //>
  case "cross" : case "circle": case "disk": case "circled-cross": case "gear":                         //> Type of marker - as expected.
  case "square":                                                                                        //> rounded unfilled square
  case "target":                                                                                        //> filled square
                        MarkerMgr.markerEquatorial(                                                     //>   https://stellarium.org/doc/24.0/classMarkerMgr.html#a86e2b962c9df54a77a7d568d931bfcbc
                                                    m.raJ2000   // ???  sDms( m.raJ2000  )              //> const QString &         RA,
                        ,                           m.decJ2000  // ???  sDms( m.decJ2000 )              //> const QString &         Dec,
                        ,                           true                                                //> bool                    j2000epoch = true,
                        ,                           true                                                //> bool                    visible = true,
                        ,                           s                                                   //> const QString &         mtype = "cross",
                        ,                           a_sRgb                                              //> const QString &         color = "#ffff66",
                        ,                           a_dSize                                             //> const float             size = 6.f,
                                                                                                        //> bool                    autoDelete = false,
                                                                                                        //> int                     autoDeleteTimeoutMs = 0,
                                                                                                        //> bool                    withAberration = true
                        );                                                                              //> Returns a unique ID which can be used to refer to the marker. returns -1 if the marker could not be created (e.g. object not found)
  break;default      :  LabelMgr.labelEquatorial(                                                       //> https://stellarium.org/doc/head/classLabelMgr.html#aa3db5e65c8f240b265565b996df7bbf3
                                                    '           '+s                                     //> text                the text to display
                        ,                           sDMS( m.raJ2000  )                                  //> RA                  right ascension (e.g. 5h10m31s)
                        ,                           sDMS( m.decJ2000 )                                  //> Dec                 declination (e.g. 25d30m30s)
                        ,                           true                                                //> visible             if true, the label starts displayed, else it starts hidden
                        ,                           a_dSize                                             //> fontSize            size of the font to use
                        ,                           a_sRgb                                              //> fontColor           either HTML-like color spec, e.g. "#ffff00", or 3-part float vector like Vec3f(1.0f,1.0f,0.0f) for yellow
                        ,                           ""                                                  //> side                where the label appears in relation to coordinates: "N" = above object on screen,"S","E","W","NE", "NW", "SE", "SW"
                        ,                           0                                                   //> labelDistance
                        ,                           false                                               //> autoDelete          the label will be automatically deleted after it is displayed once
                        ,                           0                                                   //> autoDeleteTimeoutMs if not zero, the label will be automatically deleted after autoDeleteTimeoutMs ms
                        ,                           true                                                //> j2000epoch          if true, the label starts displayed in equatorial coordinates for epoch J2000.0
                        );                                                                              //>
  }//switch                                                                                             //>
}//Mark///////////////////////////////////////////////////////////////////////////////////////////////////>


function                                MarkStars(////////////////////////////////////////////////////////#
){                                      //////////////////////////////////////////////////////////////////>
  const                                 sWHT                    = "#ffffff";                            //>
  const                                 sORA                    = "#ffee00";                            //>
  const                                 sYEL                    = "#ffff00";                            //>
  const                                 sRED                    = "#ff0000";                            //>
  const                                 sBLU                    = "#0088ff";                            //>
  const                                 sGRN                    = "#00ff00";                            //>
core.output("!!!!!!!!!!!!!!!!!! MarkStars");
                                                                                                        //>
  var                                     asSTARS          =                                            //> List of brightest stars.
["HR 2491","HR 2326","HR 5340","HR 5459","HR 7001","HR 1708","HR 1713","HR 2943","HR 472" ,"HR 2061","HR 5267","HR 7557","HR 1457","HR 6134","HR 5056"
,"HR 2990","HR 8728","HR 4853","HR 7924","HR 4730","HR 5460","HR 3982","HR 2618","HR 4763","HR 6527","HR 1790","HR 1791","HR 3685","HR 1903","HR 4731"
,"HR 8425","HR 4905","HR 3207","HR 1017","HR 4301","HR 2693","HR 6879","HR 3307","HR 5191","HR 6553","HR 2088","HR 6217","HR 2421","HR 7790","HR 3485"
,"HR 2294","HR 3748","HR 2891","HR 617" ,"HR 5958","HR 7121","HR 424" ,"HR 188" ,"HR 1948","HR 5288","HR 2004","HR 15"  ,"HR 337" ,"HR 6556","HR 5563"
,"HR 8636","HR 936" ,"HR 4534","HR 4819","HR 7796","HR 3634","HR 1852","HR 5793","HR 6705","HR 168" ,"HR 3699","HR 3165","HR 603" ,"HR 5054","HR 21"
,"HR 6241","HR 5132","HR 5469","HR 5440","HR 5953","HR 4295","HR 99"  ,"HR 8308","HR 6580","HR 8775","HR 6378","HR 4554","HR 8162","HR 2827","HR 7949"
,"HR 264" ,"HR 8781","HR 3734","HR 911" ,"HR 5231","HR 6175","HR 4357","HR 1865","HR 4662","HR 4621","HR 7194","HR 5685","HR 4057","HR 5984","HR 2095"
,"HR 1956","HR 553" ,"HR 4786","HR 5854","HR 5571","HR 5235","HR 403" ,"HR 4798","HR 4216","HR 6508","HR 1577","HR 2773","HR 6859","HR 5506","HR 7525"
,"HR 6056","HR 6132","HR 5028","HR 5531","HR 4199","HR 1899","HR 6603","HR 6148","HR 5776","HR 1666","HR 6536","HR 98"  ,"HR 4656","HR 6913","HR 3185"
,"HR 6212","HR 6165","HR 4932","HR 39"  ,"HR 1829","HR 5897","HR 6461","HR 1203","HR 591" ,"HR 8502","HR 8322","HR 1165","HR 7528","HR 2286","HR 2890"
,"HR 5671","HR 5944","HR 6084","HR 7264","HR 1220","HR 2845","HR 4915","HR 8232","HR 2553","HR 915" ,"HR 8650","HR 6510","HR 4757","HR 1231","HR 8414"
,"HR 3873","HR 2473","HR 6746","HR 7235","HR 1605","HR 5020","HR 4630","HR 1910","HR 622" ,"HR 3890","HR 8353","HR 4335","HR 1122","HR 2282","HR 2653"
,"HR 6615","HR 5435","HR 5193","HR 681" ,"HR 4844","HR 4069","HR 5735","HR 7310","HR 6247","HR 7776","HR 7417","HR 7869","HR 6832","HR 4232","HR 3547"
,"HR 2040","HR 4467","HR 3803","HR 6285","HR 5576","HR 3705","HR 6410","HR 3569","HR 6418","HR 2451","HR 7039","HR 1641","HR 3775","HR 6396","HR 5463"
,"HR 1654","HR 1543","HR 6299","HR 8115","HR 6630","HR 8974","HR 5695","HR 7710","HR 8238","HR 1208","HR 897" ,"HR 6075","HR 7178","HR 2878","HR 6869"
,"HR 2550","HR 1465","HR 5287","HR 6453","HR 8709","HR 165" ,"HR 2216","HR 5603","HR 5744","HR 322" ,"HR 1702","HR 4660","HR 4037","HR 4140","HR 7234"
,"HR 6380","HR 6462","HR 3045","HR 6698","HR 4359","HR 1336","HR 8465","HR 1788","HR 7377","HR 2484","HR 3323","HR 5708","HR 5107","HR 4910","HR 3482"
,"HR 542" ,"HR 921" ,"HR 4050","HR 8634","HR 1412","HR 5649","HR 429" ,"HR 5190","HR 5948","HR 544" ,"HR 7913","HR 6623","HR 7957","HR 3659","HR 7236"
,"HR 4031","HR 219" ,"HR 334" ,"HR 7106","HR 4033","HR 3117","HR 2646","HR 804" ,"HR 1239","HR 7635","HR 5681","HR 6406","HR 8684","HR 4377","HR 8675"
,"HR 509" ,"HR 5602","HR 6897","HR 7150","HR 3249","HR 3852","HR 3975","HR 8694","HR 5881","HR 8450","HR 1409","HR 2777","HR 6220","HR 3940","HR 4450"
,"HR 6561","HR 1136","HR 1879","HR 5354","HR 1998","HR 7665","HR 674" ,"HR 5705","HR 1347","HR 4382","HR 74"  ,"HR 6252","HR 7754","HR 2985","HR 464"
,"HR 6927","HR 5794","HR 2763","HR 5429","HR 4700","HR 3786","HR 1983","HR 402" ,"HR 1735","HR 1030","HR 2540","HR 3594","HR 3017","HR 3994","HR 4540"
,"HR 4923","HR 6582","HR 6500","HR 3447","HR 6271","HR 437" ,"HR 8762","HR 7882","HR 1178","HR 838" ,"HR 4520","HR 7986","HR 4825","HR 1346","HR 5291"
,"HR 6743","HR 5812","HR 8812","HR 153" ,"HR 5867","HR 3757","HR 3468","HR 8278","HR 4826","HR 5747","HR 3884","HR 1003","HR 8852","HR 1552","HR 566"
,"HR 1142","HR 6703","HR 2085","HR 5892","HR 7602","HR 4518","HR 5511","HR 1567","HR 8130","HR 8079","HR 2077","HR 3080","HR 539" ,"HR 1084","HR 6771"
,"HR 8204","HR 8698","HR 1038","HR 3614","HR 6629","HR 6095","HR 1612","HR 6688","HR 8571","HR 8254","HR 1922","HR 6229","HR 1373","HR 8430","HR 834"
,"HR 3347","HR 7217","HR 7950","HR 7906","HR 1135","HR 8585","HR 7328","HR 2736","HR 4257","HR 2650","HR 2821","HR 7735","HR 7420","HR 5788","HR 5789"
,"HR 4058","HR 941" ,"HR 6588","HR 3888","HR 2035","HR 4094","HR 1931","HR 4114","HR 1464","HR 6149","HR 7536","HR 3690","HR 8961","HR 5470","HR 5248"
,"HR 6779","HR 1131","HR 4247","HR 7582","HR 3571","HR 4167","HR 3445","HR 8518","HR 1411","HR 6895","HR 5849","HR 4434","HR 1175","HR 6030","HR 2020"
,"HR 4023","HR 2296","HR 2749","HR 6973","HR 4133","HR 5933","HR 4802","HR 1326","HR 6812","HR 6695","HR 4773","HR 5646","HR 5249","HR 1862","HR 963"
,"HR 2580","HR 1481","HR 1149","HR 269" ,"HR 4787","HR 25"  ,"HR 5089","HR 5928","HR 5487","HR 3665","HR 3905","HR 6102","HR 4390","HR 874" ,"HR 4689"
,"HR 7615","HR 6092","HR 8820","HR 3314","HR 7570","HR 4337","HR 4743","HR 3487","HR 5787","HR 3845","HR 1251","HR 338" ,"HR 8131","HR 6324","HR 7340"
,"HR 2970","HR 1463","HR 100" ,"HR 4399","HR 3461","HR 8028","HR 3024","HR 440" ,"HR 5883","HR 2429","HR 8667","HR 854" ,"HR 5055","HR 7590","HR 4638"
,"HR 2120","HR 1393","HR 2538","HR 2996","HR 5993","HR 3663","HR 8556","HR 7348","HR 3438","HR 8892","HR 6714","HR 2012","HR 3579","HR 2803","HR 2227"
,"HR 7751","HR 580" ,"HR 8848","HR 4102","HR 3615","HR 868" ,"HR 5471","HR 585" ,"HR 6982","HR 7337","HR 3518","HR 6027","HR 8679","HR 9072","HR 7834"
,"HR 664" ,"HR 5062","HR 5986","HR 6072","HR 4623","HR 7193","HR 1520","HR 8597","HR 7176","HR 3475","HR 8252","HR 4898","HR 6752","HR 4517","HR 7852"
,"HR 1603","HR 4679","HR 1298","HR 1228","HR 7157","HR 1273","HR 5453","HR 5626","HR 5367","HR 5485","HR 4386","HR 937" ,"HR 5404","HR 6295","HR 215"
,"HR 2905","HR 3318","HR 5670","HR 3477","HR 8075","HR 2574","HR 779" ,"HR 1580","HR 5200","HR 496" ,"HR 3825","HR 4287","HR 4405","HR 5338","HR 8173"
,"HR 8316","HR 705" ,"HR 919" ,"HR 1907","HR 5879","HR 458" ,"HR 4174","HR 806" ,"HR 4671","HR 5771","HR 4522","HR 3055","HR 8560","HR 794" ,"HR 7259"
,"HR 7254","HR 7980","HR 1066","HR 8747","HR 2657","HR 3903","HR 4608","HR 2124","HR 799" ,"HR 6905","HR 7581","HR 8969","HR 8315","HR 8498","HR 3426"
,"HR 7936","HR 1784","HR 5778","HR 8976","HR 1303","HR 8630","HR 4616","HR 5908","HR 2714","HR 2343","HR 5947","HR 6166","HR 8499","HR 3410","HR 2134"
,"HR 130" ,"HR 1195","HR 8628","HR 6486","HR 1156","HR 2852","HR 5351","HR 5192","HR 5315","HR 8665","HR 7061","HR 8494","HR 3102","HR 1839","HR 6168"
,"HR 8720","HR 8841","HR 1949","HR 4100","HR 1035","HR 8181","HR 7074","HR 8834","HR 7063","HR 1387","HR 7942","HR 7850","HR 6920","HR 77"  ,"HR 5987"
,"HR 6143","HR 5168","HR 1173","HR 7564","HR 840" ,"HR 8143","HR 1087","HR 8335","HR 6322","HR 6163","HR 3090","HR 7747","HR 1338","HR 721" ,"HR 4104"
,"HR 811" ,"HR 1458","HR 3572","HR 1454","HR 3275","HR 335" ,"HR 5430","HR 285" ,"HR 4674","HR 6581","HR 5264","HR 510" ,"HR 4983","HR 4785","HR 6023"
,"HR 2091","HR 4942","HR 5683","HR 3206","HR 1008","HR 4889","HR 1088","HR 8418","HR 1679","HR 813" ,"HR 1473","HR 7948","HR 4180","HR 8787","HR 4552"
,"HR 8167","HR 6147","HR 1101","HR 8916","HR 294" ,"HR 718" ,"HR 1392","HR 1497","HR 2973","HR 7343","HR 6546","HR 8576","HR 6492","HR 1756","HR 1320"
,"HR 1389","HR 8454","HR 8965","HR 1261","HR 8334","HR 8417","HR 1542","HR 3751","HR 4471","HR 3454","HR 1145","HR 7139","HR 7740","HR 280" ,"HR 4775"
,"HR 3773","HR 5733","HR 5339","HR 4537","HR 5528","HR 5997","HR 1496","HR 3484","HR 7884","HR 2854","HR 5903","HR 4599","HR 3457","HR 5358","HR 4888"
,"HR 5797","HR 2387","HR 6446","HR 596" ,"HR 6872","HR 343" ,"HR 3696","HR 5260","HR 8305","HR 5686","HR 3188","HR 6498","HR 8313","HR 3340","HR 3223"
,"HR 2015","HR 6745","HR 3836","HR 5396","HR 898" ,"HR 951" ,"HR 2219","HR 2560","HR 6855","HR 191" ,"HR 5285","HR 2106","HR 1705","HR 7447","HR 3492"
,"HR 1544","HR 7069","HR 6787","HR 1256","HR 4737","HR 154" ,"HR 7056","HR 7314","HR 8572","HR 1052","HR 6789","HR 126" ,"HR 8937","HR 7623","HR 2256"
,"HR 2596","HR 649" ,"HR 3980","HR 7488","HR 7479","HR 163" ,"HR 4963","HR 6281","HR 1845","HR 8140","HR 2435","HR 4293","HR 6445","HR 8906","HR 8858"
,"HR 1560","HR 3145","HR 7298","HR 7750","HR 8368","HR 2554","HR 2782","HR 3192","HR 5601","HR 8905","HR 3129","HR 555" ,"HR 8863","HR 5526","HR 9089"
,"HR 1876","HR 2047","HR 6526","HR 6707","HR 2697","HR 4375","HR 8819","HR 5425","HR 5378","HR 6118","HR 1162","HR 7951","HR 8559","HR 2159","HR 4300"
,"HR 271" ,"HR 2443","HR 1325","HR 5868","HR 224" ,"HR 5478","HR 7928","HR 7806","HR 8146","HR 8538","HR 7107","HR 1355","HR 3243","HR 48"  ,"HR 3418"
,"HR 2298","HR 489" ,"HR 7405","HR 4234","HR 4159","HR 1502","HR 3591","HR 3225","HR 3270","HR 2906","HR 6153","HR 1696","HR 6723","HR 7429","HR 7352"
,"HR 4546","HR 8411","HR 8695","HR 841" ,"HR 1698","HR 3731","HR 5447","HR 8632","HR 4618","HR 6115","HR 8789","HR 818" ,"HR 4368","HR 1601","HR 2506"
,"HR 999" ,"HR 1568","HR 1155","HR 3643","HR 8540","HR 2361","HR 4343","HR 2199","HR 3974","HR 7469","HR 3619","HR 2238","HR 3498","HR 2740","HR 3084"
,"HR 8988","HR 5570","HR 3981","HR 8123","HR 2478","HR 1394","HR 8485","HR 9076","HR 4074","HR 8431","HR 2948","HR 3034","HR 8080","HR 6104","HR 8984"
,"HR 2385","HR 5185","HR 4259","HR 3799","HR 1264","HR 5704","HR 2042","HR 7920","HR 3765","HR 1453","HR 8213","HR 8093","HR 824" ,"HR 352" ,"HR 8579"
,"HR 7955","HR 7685","HR 3856","HR 7604","HR 5359","HR 8795","HR 5842","HR 7744","HR 68"  ,"HR 6485","HR 1995","HR 8830","HR 707" ,"HR 5041","HR 5035"
,"HR 6783","HR 2937","HR 2113","HR 8773","HR 4527","HR 843" ,"HR 7963","HR 226" ,"HR 127" ,"HR 5781","HR 5712","HR 6616","HR 2414","HR 5652","HR 6493"
,"HR 2864","HR 5616","HR 1726","HR 193" ,"HR 5329","HR 9045","HR 1040","HR 575" ,"HR 1652","HR 6081","HR 9098","HR 8923","HR 5544","HR 3800","HR 8089"
,"HR 2527","HR 1247","HR 5395","HR 5210","HR 3612","HR 3771","HR 8317","HR 4200","HR 4063","HR 6766","HR 9016","HR 3787","HR 1934","HR 6117","HR 8225"
,"HR 8523","HR 8541","HR 3912","HR 1106","HR 7650","HR 3628","HR 7592","HR 2034","HR 6636","HR 6537","HR 180" ,"HR 7242","HR 1143","HR 2993","HR 6028"
,"HR 5904","HR 1892","HR 8558","HR 1811","HR 7133","HR 7995","HR 3894","HR 7371","HR 4352","HR 4975"    //>
];                                                                                                      //>
  var                                   map                     = null;                                 //>
  var                                   i                       = 0;                                    //>
  var                                   dR                      = 5;                                    //>
  var                                   sRgb                    = "#FFFFFF";                            //>
  core.output("STARS:");                                                                                //>
  for( ; i < asSTARS.length; i++ ){                                                                     //>
   if(  10 == i ){ dR =  5; sRgb = "#FFFFFF"; }                                                         //>
   if(  20 == i ){ dR =  4; sRgb = "#FFFFFF"; }                                                         //>
   if(  40 == i ){ dR =  3; sRgb = "#FFFFFF"; }                                                         //>
   if(  80 == i ){ dR =  2; sRgb = "#FFFFFF"; }                                                         //>
   if( 160 == i ){ dR =  1; sRgb = "#FFFFFF"; }                                                         //>
   if( 300 == i ){ dR =  1; sRgb = "#DDDDDD"; }                                                         //>
   if( 400 == i ){ dR =  1; sRgb = "#AAAAAA"; }                                                         //>
   if( 600 == i ){ dR =  1; sRgb = "#777777"; }                                                         //>
   if( 800 == i ){ dR =  1; sRgb = "#444444"; }                                                         //>
   map = mapSelect( asSTARS[i] );                                                                       //>
   core.output( asSTARS[i] +"                "+ map["name"] );                                          //>
   Mark( asSTARS[i]        ,"disk" ,sRgb ,dR     );                                                     //>
  }//for                                                                                                //>
}//MarkStars//////////////////////////////////////////////////////////////////////////////////////////////>


function                                iEasePng(/////////////////////////////////////////////////////////#
                                        a_iShot                                                         //>
,                                       a_dGo_day                                                       //> sSimulate date/time as a Julian date.
,                                       a_dEnd_day                                                      //> End date/time as a Julian date.
,                                       dStep_days                                                      //> Time between screen-shots, in days.
){                                      //////////////////////////////////////////////////////////////////>
  let                                   r_iShot                 = a_iShot               ;               //>
  let                                   dTake_days              = a_dEnd_day - a_dGo_day;               //> Length of animation in real-time.
  let                                   dSteps                  = dTake_days/dStep_days ;               //> Number of steps to take.
  for( let i = 0; i < dSteps; i++ ){                                                                    //>
   core.setJDay(   ( (dSteps - i)*a_dGo_day + i*a_dEnd_day )/dSteps   );                         NAP(); //>
   core.screenshot( 'scr_' + (100000 + r_iShot) ,false ,g_sPATHsHOTS ,true ,'png' );    r_iShot++;      //> invert, directory, overwrite ,format
  }//for d                                                                                              //>
return r_iShot++;                                                                                       //>
}//iEasePng///////////////////////////////////////////////////////////////////////////////////////////////>


function                                Reset(////////////////////////////////////////////////////////////> Set up our own default "reset" state:
){                                      //////////////////////////////////////////////////////////////////>
  core                  .clear("natural");                                                              //> Clear the display options. natural: azimuthal mount, atmosphere, landscape, no lines, labels or markers.   "starchart"   https://stellarium.org/doc/23.0/classStelMainScriptAPI.html
  core                  .setProjectionMode(                                                             //> https://stellarium.org/doc/23.0/classStelMainScriptAPI.html
                                           "ProjectionStereographic"                                    //>
                                        // "ProjectionPerspective"                                      //> Perspective projection - did not work as well.
                                        // "ProjectionEqualArea"                                        //>
                                        // "ProjectionFisheye"                                          //>
                                        // "ProjectionHammer"                                           //>
                                        // "ProjectionCylinder"                                         //>
                                        // "ProjectionMercator"                                         //>
                                        // "ProjectionOrthographic"                                     //>
                                        // "ProjectionSinusoidal"                                       //>
                                        // "ProjectionMiller"                                           //>
                        );                                                                              //>
  core                  .setTimeRate(                           0   );                                  //> Paused.
  core                  .setTimezone(                    "UTC-00:00");                                  //>   https://stellarium.org/doc/23.0/classStelMainScriptAPI.html
  ConstellationMgr      .setArtIntensity(                       0.6 );                                  //>
  ConstellationMgr      .setFlagArt(                           true );                                  //>   https://stellarium.org/doc/23.0/classConstellationMgr.html
  ConstellationMgr      .setFlagBoundaries(                   false );                                  //> Constellation boundaries lines will not be displayed.
  ConstellationMgr      .setFlagIsolateSelected(               true );                                  //> Selected constellation displayed alone.
  ConstellationMgr      .setFlagLabels(                       false );                                  //> Constellation names will not be displayed.
  ConstellationMgr      .setFlagLines(                         true );                                  //> Constellation lines.
  ConstellationMgr      .deselectConstellations(                    );                                  //>
  GridLinesMgr          .setFlagAzimuthalGrid(                false );                                  //> Shows or hides the grid for the horizontal coordinate system.   https://stellarium.org/doc/23.0/classGridLinesMgr.html
  GridLinesMgr          .setFlagEclipticJ2000Grid(            false );                                  //> Display Ecliptic Grid of J2000.0.
  GridLinesMgr          .setFlagEclipticGrid(                 false );                                  //> Display Ecliptic Grid of Date.
  GridLinesMgr          .setFlagEclipticLine(                 false );                                  //> ???
  GridLinesMgr          .setFlagEquatorGrid(                  false );                                  //> Centered on north pole.
  GridLinesMgr          .setFlagEquatorJ2000Grid(             false );                                  //> Display Equatorial J2000 Grid.
  GridLinesMgr          .setFlagFixedEquatorGrid(             false );                                  //> Display the Fixed Equatorial Grid (Hour angle/declination).
  GridLinesMgr          .setFlagGalacticGrid(                 false );                                  //> Display Galactic Grid.
  GridLinesMgr          .setFlagMeridianLine(                 false );                                  //> North-south line?
  GridLinesMgr          .setFlagSupergalacticGrid(            false );                                  //> Display Supergalactic Grid.
  LabelMgr              .deleteAllLabels(                           );                                  //> Delete text boxes. LabelMgr.labelScreen - adds text to the scene.   https://stellarium.org/doc/0.20/classLabelMgr.html
  LandscapeMgr          .setFlagAtmosphere(                    true );                                  //> https://stellarium.org/doc/23.0/classLandscapeMgr.html
  LandscapeMgr          .setFlagCardinalPoints(                true );                                  //>
  LandscapeMgr          .setFlagFog(                          false );                                  //>
  LandscapeMgr          .setFlagLandscape(                     true );                                  //> Turn on Landscape,
  LandscapeMgr          .setFlagLandscapeUseTransparency(      true );                                  //> Determine if a transparency should be used.
  LandscapeMgr          .setLandscapeTransparency(              0.2 );                                  //> Value of transparency, 1 = fully transparent
  MarkerMgr             .deleteAllMarkers(                          );                                  //> https://stellarium.org/doc/23.0/classMarkerMgr.html
  SolarSystem           .setFlagMoonScale(                    false );                                  //> Determines if Earth's moon is scaled or not.
  SolarSystem           .setMoonScale(                           1  );                                  //> Set the display scaling factor for Earth's moon.
  SolarSystem           .setFlagDrawMoonHalo(                  true );                                  //> Glare around moon.
  SporadicMeteorMgr     .setFlagShow(                         false );                                  //> No meteors.   https://stellarium.org/doc/23.0/classSporadicMeteorMgr.html
  StelSkyDrawer         .setFlagTwinkle(                      false );                                  //> No star twinkle.   https://stellarium.org/doc/23.0/classStelSkyDrawer.html
  StelSkyDrawer         .setFlagLuminanceAdaptation(          false );                                  //> Set the value of the eye adaptation flag.
}//Reset//////////////////////////////////////////////////////////////////////////////////////////////////>


function                                SetTimeToVegaKiss(////////////////////////////////////////////////> Set time to when Vega kisses the horizon.
                                        a_nDayI                                                         //>
){                                      //////////////////////////////////////////////////////////////////>
  core.setJDay( a_nDayI );                                                                              //>
  let                                   map                     = mapSelect("6 Lyr");                   //> mapSelect the star near Vega (but south of it, so it sets and rises again).
  let                                   dSet_h                  = map["set-dhr" ];                      //>
  let                                   dRise_h                 = map["rise-dhr"];                      //>
  if(  dSet_h < 12   ||   dRise_h < 12 ){                                                               //>
   core.setJDay( a_nDayI + 1 );                                                                 NAP();  //> Next day:
   map = core.getSelectedObjectInfo();                                                                  //>
   if( dSet_h  < 12 ){   dSet_h  = map["set-dhr" ]; if(dSet_h  < 12){dSet_h  += 24;}   }                // r_s +=" S:"+ dSet_h ;   } //>
   if( dRise_h < 12 ){   dRise_h = map["rise-dhr"]; if(dRise_h < 12){dRise_h += 24;}   }                // r_s +=" R:"+ dRise_h;   } //>
  }//if                                                                                                 //>
  core.setJDay(  a_nDayI-0.5+( (dSet_h + dRise_h)/2 - 8/60 )/24   );                                    //> At time of Vega kiss (small fudge factor because we are using a nearby star)...
}//SetTimeToVegaKiss//////////////////////////////////////////////////////////////////////////////////////>


function                                dOverLine_360(////////////////////////////////////////////////////> Test which side of great circle defined by Canis Minor a given point is.
                                        a_Qlat_360                                                      //> Declination and
,                                       a_Qlong_360                                                     //> Right Ascension of point to test.
){                                      //////////////////////////////////////////////////////////////////>
// let                                  xA                      = CosD(a_Alat_360)*CosD(a_Along_360);   //> Code to find constants for Procyon and Gomeisa latitude) of the first point
// let                                  yA                      = CosD(a_Alat_360)*SinD(a_Along_360);   //>
// let                                  zA                      = SinD(a_Alat_360)                  ;   //>
// let                                  xB                      = CosD(a_Blat_360)*CosD(a_Blong_360);   //>
// let                                  yB                      = CosD(a_Blat_360)*SinD(a_Blong_360);   //>
// let                                  zB                      = SinD(a_Blat_360)                  ;   //>
// core.output( "dOverLine_360, "+ xA +", "+  yA +", "+  zA );                                          //>
// core.output( "dOverLine_360, "+ xB +", "+  yB +", "+  zB );                                          //>
  const                                 xA                      = -0.41812783213741955;                 //> Pre-calculated values for Procyon
  const                                 yA                      =  0.9038249325942993 ;                 //> "
  const                                 zA                      =  0.09093738072416822;                 //> and
  const                                 xB                      = -0.36737866131120084;                 //> Gomeisa
  const                                 yB                      =  0.91883139318759   ;                 //> "
  const                                 zB                      =  0.14415890574689555;                 //> .
                                                                                                        //>
  let                                   xQ                      = CosD(a_Qlat_360)*CosD(a_Qlong_360);   //> Convert to 3-D co-ords of unit vector
  let                                   yQ                      = CosD(a_Qlat_360)*SinD(a_Qlong_360);   //> "
  let                                   zQ                      = SinD(a_Qlat_360)                  ;   //> .
                                                                                                        //>
  let                                   xS                      =  yA*zB - zA*yB;                       //> a2b3 - a3b2   Cross product.
  let                                   yS                      =  zA*xB - xA*zB;                       //> a3b1 - a1b3
  let                                   zS                      =  xA*yB - yA*xB;                       //> a1b2 - a2b1
  let                                   dDotQS                  =            xS*xQ + yS*yQ + zS*zQ;     //>               Dot product.
  let                                   dS                      = Math.sqrt( xS*xS + yS*yS + zS*zS );   //>               Magnitude.
  let                                   r_d_360                 = Math.asin(dDotQS/dS)*180/Math.PI;     //> core.output( "Q.S, "+ r_d ); //> Distance from point to dividing line. Convert to degrees (why not?)
return r_d_360;                                                                                         //> Report distance from point to dividing line defined by Canis Minor.
}//dOverLine_360//////////////////////////////////////////////////////////////////////////////////////////>


function                                DrawLine(/////////////////////////////////////////////////////////>
){                                      //////////////////////////////////////////////////////////////////>
  let                                   xA                      = -0.41812783213741955;                 //> Pre-calculated values for Procyon
  let                                   yA                      =  0.9038249325942993 ;                 //> "
  let                                   zA                      =  0.09093738072416822;                 //> and
  let                                   xB                      = -0.36737866131120084;                 //> Gomeisa
  let                                   yB                      =  0.91883139318759   ;                 //> "
  let                                   zB                      =  0.14415890574689555;                 //> .
                                                                                                        //>
  let                                   dPsi                    = Math.acos(xA*xB + yA*yB + zA*zB);     //> Angular distance between 2 points.
  let                                   x3                      = ( xB - xA*CosR(dPsi) ) / SinR(dPsi);  //>
  let                                   y3                      = ( yB - yA*CosR(dPsi) ) / SinR(dPsi);  //>
  let                                   z3                      = ( zB - zA*CosR(dPsi) ) / SinR(dPsi);  //>
  for( let dPhi = 0; dPhi <= 8.5*dPsi; dPhi += 0.25*dPsi ){                                             //> DOTTED LINE on celestial sphere...
   MarkerMgr.markerEquatorial(  Math.atan2( yA*CosR(dPhi) + y3*SinR(dPhi)                               //> Find arctan
                                ,           xA*CosR(dPhi) + x3*SinR(dPhi)                               //> ", and
                                )                                          *180/Math.PI                 //> convert to degrees.
   ,                            Math.asin(  zA*CosR(dPhi) + z3*SinR(dPhi) )*180/Math.PI                 //> Convert to degrees.
   ,                            true ,true ,"cross" ,"#ffff00" ,4                                       //>
   );                                                                                                   //>
  }//for dPhi                                                                                           //>
}//DrawLine///////////////////////////////////////////////////////////////////////////////////////////////>


function                                s5(///////////////////////////////////////////////////////////////# Round output numbers. Currently disabled due to uncertain accuracy.
                                        a                                                               //>
){                                      //////////////////////////////////////////////////////////////////>
return a;
// let                                  r_s                     = a +"      ";                          //>
// let                                  i                       = r_s.indexOf(".");                     //>
// if( i < 0 ){                                                                           return a +"";}//>
//return r_s.slice(0 ,i) +"."+ r_s.slice(i+1 ,i+6);                                                     //>
}//s5/////////////////////////////////////////////////////////////////////////////////////////////////////>


function                                avTable_Basics(///////////////////////////////////////////////////> Start output line with basic info about a date.
                                        a_nDay_jd                                                       //> Julian day number.
){                                      //////////////////////////////////////////////////////////////////>
  core.setJDay( a_nDay_jd );                                                                            //> Set the display to the day in question.
  let                                   sDate                   = core.getDate();                       //> Get ISO representation of the date.
  let                                   mapSun                  = mapSelect("Sun" );                    //>
  let                                   mapMoon                 = mapSelect("Moon");                    //>
  let                                   dSunSet_h               = mapSun[ "set-dhr" ];                  //> Select the sun so we can get time of sunset.
  let                                   r_dMoonRise_h           = mapMoon["rise-dhr"];                  //> Select the moon so we can get the time of sunrise.
  let                                   r_dMoonSet_h            = -1;                                   //>
  if(       isNaN(r_dMoonRise_h)         ){ r_dMoonRise_h = -1;                                         //> If unable to get the moonrise then flag this.
  }else{                                    r_dMoonSet_h  = mapMoon["set-dhr" ];                        //> If no problem, then get the time of moonset.
   if(      isNaN(r_dMoonSet_h)          ){ r_dMoonSet_h = -1; }                                        //> If unable to get the moonset then flag this,
   else if( r_dMoonSet_h < r_dMoonRise_h ){ r_dMoonSet_h = -1; }                                        //> or if the moonset is before the moonrise, then we will want to try again.
   else if( r_dMoonSet_h < dSunSet_h     ){ r_dMoonSet_h = -1; r_dMoonRise_h = -1; }                    //> If moonset is before sunset, then we will want to try again.
  }//if                                                                                                 //> .
                                                                                                        //>
  core.setJDay( a_nDay_jd + 1 );                                                                        //> Next day:
  let                                   dSunRise_h              = -1;                                   //> The time of the runrise
  mapSun  = mapSelect("Sun" ); dSunRise_h  = mapSun[ "rise-dhr"] + 24;                                  //> Select the sun so we can find sunrise, the end of the night.
  mapMoon = mapSelect("Moon");                                                                          //> Select the moon.
  if( r_dMoonRise_h < 0 ){                                                                              //> If we still need the moonrise, then
   r_dMoonRise_h = mapMoon["rise-dhr"];                                                                 //> get it now.
   if(   isNaN(r_dMoonRise_h)      ){ r_dMoonRise_h = -1; }                                             //> If there is a problem, then flag it as unavailable.
   else{                                                                                                //> otherwise,
    r_dMoonRise_h += 24;                                                                                //> remember we are past midnight.
    if( dSunRise_h < r_dMoonRise_h ){ r_dMoonRise_h = -1; }                                             //> If the moonrise is after sunrise, then flag it as unavailable.
  }}//if//if                                                                                            //>
return [sDate +","+ a_nDay_jd +","+ s5( dSunSet_h     ) // .toFixed(4)                                  //> Output what we have so far.
                              +","+ s5( dSunRise_h    ) // .toFixed(4)                                  //>
                              +","+ s5( r_dMoonRise_h ) // .toFixed(4)                                  //>
       ,r_dMoonSet_h                                                                                    //>
       ,r_dMoonRise_h                                                                                   //>
       ];                                                                                               //>
}//avTable_Basics/////////////////////////////////////////////////////////////////////////////////////////>


function                                Table(////////////////////////////////////////////////////////////# Output table of info by date.
                                        a_nGo                                                           //> Given a year.
,                                       a_sPath                                                         //> Path to save results.
){                                      //////////////////////////////////////////////////////////////////>
  Reset();                                                                                              //> Reset Stellarium to known state, or best possible.
  core.output("Moon data");                                                                             //>
  core.setObserverLocation( -1.82618827 ,51.17886594 ,0 ,0 ,"Stonehenge" ,"Earth" );                    //> Stonehenge = 51.17886594 ,-1.82618827   Cool location
  core.setTimezone("LMST");                                                                             //> "LMST" = Local Mean Solar Time    https://stellarium.org/doc/23.0/classStelMainScriptAPI.html#abc7e6a709ec2670b6581ce4b51db3185
  core.setDate( a_nGo +"-01-01T00:00:00" ,"LMST" );                                                     //> Before early start of year.
  let                                   nDay                    = Math.floor( core.getJDay() );         //> Get the count of days, the noon before midnight.
  Look( 90,  180  ,180 ,0.1 );                                                                          //> Look straight up, south at bottom, whole sky view, quick.
  core.output( "sDate,a_nDay_jd,dSunSet_h,dSunRise_h,r_dMoonRise_h"                                     //> Column header row
  +           ",dMoonSet_h"                                                                             //> "
  +           ",Moon_sDate,dLit_100,dRa,dDec"                                                           //> "
  +           ",MidN_sDate,dLit_100,dRa,dDec"                                                           //> "
  +           ",Vega_sDate,dLit_100,dRa,dDec"                                                           //> "
  );                                                                                                    //> .
  let                                   dNoon                   = 0;                                    //>
  let                                   nEnd                    = nDay + 365 + 7;                       //> A year and a bit of overlap with next year.
  for( dNoon = nDay; dNoon < nEnd; dNoon++ ){                                                           //> For a number of years (plus a bit of slop)...
   let                                  av                      = avTable_Basics(dNoon);                //>
   sRow =                               av[0];                                                          //>
   let                  dMoonSet_h    = av[1];                                                          //>
   let                  dMoonRise_h   = av[2];                                                          //>
                                                                                                        //> But, if we have a moonrise time, then not a new moon, so...
   let                                  m                       = mapSelect("Moon");         // NAP();  //> Refresh info about the moon.
   if( dMoonSet_h < 0 ){ dMoonSet_h  = m["set-dhr" ] + 24; }                                            //> MOST ROWS: If still looking for the moonset, then get it now, including day we have skipped in hours.
   sRow += ","+s5(dMoonSet_h);                                                                          //> Output moonset time (may be greater than 24, ie, the next day).
   core.setJDay( dNoon - 0.5 + dMoonSet_h/24             );   m = mapSelect("Moon");                    //> MOON: At time of moonset...
   sRow += ","+core.getDate()+","+s5(m["illumination"])                                                 //>
                             +","+s5(m["raJ2000"     ])+","+s5(m["decJ2000"]);                          //>
   core.setJDay( dNoon + 0.5                             );   m = mapSelect("Moon");                    //> TIME: At Midnight...
   sRow += ","+core.getDate()+","+s5(m["illumination"])                                                 //>
                             +","+s5(m["raJ2000"     ])+","+s5(m["decJ2000"]);                          //>
   SetTimeToVegaKiss(     dNoon                          );   m = mapSelect("Moon");                    //> VEGA: When Vega kisses horizon...
   sRow += ","+    core.getDate()                                                                       //>
          +","+ s5(m["illumination"               ]) //  = 49.395606994628906                           //> Illumination.
          +","+ s5(m["raJ2000"                    ])                                                    //> Right ascension.
          +","+ s5(m["decJ2000"                   ])                                                    //> Declination.
          ;                                                                                             //>
   sRow += ","+ s5(m["age"                        ]) // = "7.39"                                        //> OTHER MISC DATA: Days since new moon (as a text string).
          +","+ s5(m["distance-km"                ]) // =       369768.4086876776                       //> *
          +","+ s5(m["size-dd"                    ]) // =       0.538417844468446                       //> angular size (diameter) in decimal degrees.
          +","+ s5(m["ecliptic-obliquity"         ]) // =       23.43602467002239                       //> Mean ecliptic obliquity of date in decimal degrees. Tilt to ecliptic plane?
          +","+ s5(m["elat"                       ]) // =       0.9802472441514729                      //> Ecliptic latitude in decimal degrees (on Earth only!).
          +","+ s5(m["elong"                      ]) // =       16.099170863692454                      //> Ecliptic longitude in decimal degrees (on Earth only!).
          +","+ s5(m["glat"                       ]) // =       -55.74854664443656                      //> Galactic latitude in decimal degrees.
          +","+ s5(m["glong"                      ]) // =       125.16802876836043                      //> Galactic longitude in decimal degrees.
          +","+ s5(m["phase-angle-deg"            ]) // = "90.6926°"                                    //> Phase angle in degrees?
          +","+ s5(m["hourAngle-dd"               ]) // =       90.53513052049566                       //> hour angle in decimal degrees.
          +","+ s5(m["parallacticAngle"           ]) // =       39.02943920059663                       //> parallactic angle in decimal degrees (for non-star objects only).
          +","+ s5(m["sglat"                      ]) // =       1.5611897617043844                      //> supergalactic latitude in decimal degrees.
          +","+ s5(m["sglong"                     ]) // =       303.3886362267623                       //> supergalactic longitude in decimal degrees.
          +","+ s5(m["size-deg"                   ]) // = "0.53842°"                                    //> angular size (diameter) in decimal degrees (formatted string).
          +","+ s5(m["transit-dhr"                ]) // =       17.684444444444445                      //> Length of moon's journey across sky?.
          +","+ s5(m["albedo"                     ]) // =       0.11999999731779099                     //> Reflectivity?
          +","+ s5(m["ecl-elongation-deg"         ]) // = "89.1690°"                                    //>
          +","+ s5(m["elongation-deg"             ]) // = "89.1634°"                                    //> \ Sum to 360?
          +","+ s5(m["subsolar_l"                 ]) // =       270.8518849754954                       //> / Sum to 360?
          +","+ s5(m["subsolar_b"                 ]) // = -1.4695135977094504                           //>
          +","+ s5(m["heliocentric-distance"      ]) // =       0.9833453385096099                      //> A.U.?
          +","+ s5(m["libration_l"                ]) // =       -0.7270627059426571                     //> What part of moon is facing earth?
          +","+ s5(m["libration_b"                ]) // =       -1.8491122451938982                     //> What part of moon is facing earth?
          +","+ s5(m["pa_axis"                    ]) // =       338.875856539514                        //> Phase angle? parallactic angle Axis? angle between the great circle through a celestial object and the zenith, and the hour circle of the object.?
          +","+ s5(m["penumbral-eclipse-magnitude"]) // =       0                                       //> + for solar eclipse?
          +","+ s5(m["umbral-eclipse-magnitude"   ]) // =       0                                       //> - for lunar eclipse?
          +","+ s5(m["heliocentric-velocity"      ]) // = "[  -0.016947  , -0.00439356 , 5.1898e-05]"   //> A.U.?
          +","+ s5(m["velocity"                   ]) // = "[-0.000178199 , 0.000581518 , 5.15247e-05]"  //> ?
          +","+ s5(m["velocity-kms"               ]) // = "1.05686"                                     //> km/s relative to Earth?
   ;                                                                                                    //>
   core.output( sRow );                                                                                 //>
  }//for dNoon                                                                                          //>
  core.saveOutputAs( a_sPath + "table015_"+ a_nGo +".csv" );                                            //> Write results to file system.
}//Table//////////////////////////////////////////////////////////////////////////////////////////////////>


// core.output( core.mapToString(mapInfo ) );                                                           //> Info available from Stellarium:   https://stellarium.org/doc/0.15/classStelMainScriptAPI.html#ad831d70086a1ad8f64d8377672fd143c
//  "above-horizon"                               = true                                                //> if celestial body is above horizon or not.
//  "age"                                         = "7.39"                                              //> Days since new moon (as a text string).
//  "ra"                                          = 14.452152444215272                                  //> right ascension angle (current date frame) in decimal degrees.
//  "dec"                                         = 7.236755908534366                                   //> declination angle (current date frame) in decimal degrees.
//  "raJ2000"                                     = 14.127531922456178                                  //> right ascension angle (J2000 frame) in decimal degrees.
//  "decJ2000"                                    = 7.101178328122015                                   //> declination angle (J2000 frame) in decimal degrees.
//  "airmass"                                     = 9.636439323425293                                   //> number of airmasses the object's light had to pass through the atmosphere. For negative altitudes this number may be meaningless.
//  "altitude"                                    = 5.450075121719055                                   //> apparent altitude angle in decimal degrees.
//  "altitude-geometric"                          = 5.2979817159715                                     //> geometric altitude angle in decimal degrees.
//  "azimuth"                                     = 274.9656032787159                                   //> apparent azimuth angle in decimal degrees.
//  "azimuth-geometric"                           = 274.9656032787159                                   //> geometric azimuth angle in decimal degrees.
//  "distance-km"                                 = 369768.4086876776                                   //> *
//  "iauConstellation"                            = "Psc"                                               //> 3-letter abbreviation of IAU constellation (string).
//  "illumination"                                = 49.395606994628906                                  //> Illumination.
//  "is-waning"                                   = false                                               //>
//  "phase"                                       = 0.493956059217453                                   //> Phase (same as illumination?).
//  "size-dd"                                     = 0.538417844468446                                   //> angular size (diameter) in decimal degrees.
//  "vmag"                                        = -10.438417434692383                                 //> Visual magnitude.
//  "ecliptic-obliquity"                          = 23.43602467002239                                   //> Mean ecliptic obliquity of date in decimal degrees.
//  "elat"                                        = 0.9802472441514729                                  //> Ecliptic latitude in decimal degrees (on Earth only!).
//  "elong"                                       = 16.099170863692454                                  //> Ecliptic longitude in decimal degrees (on Earth only!).
//  "elatJ2000"                                   = 0.9784186668209234                                  //> Ecliptic latitude (Earth's J2000 frame) in decimal degrees.
//  "elongJ2000"                                  = 15.749719928149947                                  //> Ecliptic longitude (Earth's J2000 frame) in decimal degrees.
//  "glat"                                        = -55.74854664443656                                  //> Galactic latitude in decimal degrees.
//  "glong"                                       = 125.16802876836043                                  //> Galactic longitude in decimal degrees.
//  "hourAngle-dd"                                = 90.53513052049566                                   //> hour angle in decimal degrees.
//  "hourAngle-hms"                               = "6h02m08.4s"                                        //> hour angle in HMS format (formatted string).
//  "localized-name"                              = "Moon"                                              //> localized name.
//  "meanSidTm"                                   = "6h59m56.9s"                                        //> mean sidereal time, in decimal degrees (on Earth only!).
//  "appSidTm"                                    = "6h59m56.9s"                                        //> mean sidereal time, in decimal degrees (on Earth only!).
//  "name"                                        = "Moon"                                              //> english name of the object.
//  "object-type"                                 = "moon"                                              //> English lowercase name of the type of the object..
//  "parallacticAngle"                            = 39.02943920059663                                   //> parallactic angle in decimal degrees (for non-star objects only).
//  "phase-angle"                                 = 1.5828844738759689                                  //> radians?
//  "phase-angle-deg"                             = "90.6926°"                                          //> degrees?
//  "phase-name"                                  = "First Quarter"                                     //> Phase name.
//  "rise"                                        = "11h07m"                                            //> time of rise in HM format.
//  "rise-dhr"                                    = 11.116666666666667                                  //> time of rise in decimal hours.
//  "set"                                         = "---"                                               //> time of set in HM format.  Doesn't set on this day?.
//   set-dhr                                                                                            //> time of set in decimal hours.
//  "sglat"                                       = 1.5611897617043844                                  //> supergalactic latitude in decimal degrees.
//  "sglong"                                      = 303.3886362267623                                   //> supergalactic longitude in decimal degrees.
//  "size"                                        = 0.00939716413746512                                 //> angular size (diameter) in radians.
//  "size-deg"                                    = "0.53842°"                                          //> angular size (diameter) in decimal degrees (formatted string).
//  "size-dms"                                    = "+0°32'18.30""                                      //> angular size (diameter) in DMS format.
//  "transit"                                     = "17h41m"                                            //> time of transit in HM format.
//  "transit-dhr"                                 = 17.684444444444445                                  //> Time of transit in decimal hours   Length of moon's journey across sky?.
//  "type"                                        = "Planet"                                            //> type of object' class.
//  "vmage"                                       = -9.1894016265869                                    //> Visual magnitude (after atmospheric extinction).
//  "albedo"                                      = 0.11999999731779099                                 //>
//  "central_b"                                   = -1.8491122451938982                                 //>
//  "central_l"                                   = 0.7270627059426571                                  //>
//  "colongitude"                                 = 90.0825062023456                                    //>
//  "distance"                                    = 0.0024717491430840486                               //>
//  "ecl-elongation"                              = 1.5562933695571008                                  //>
//  "ecl-elongation-deg"                          = "89.1690°"                                          //>
//  "ecl-elongation-dms"                          = "+89°10'09""                                        //>
//  "elongation"                                  = 1.5561948325101131                                  //>
//  "elongation-deg"                              = "89.1634°"                                          //>
//  "elongation-dms"                              = "+89°09'48""                                        //>
//  "found"                                       = true                                                //>
//  "heliocentric-distance"                       = 0.9833453385096099                                  //>
//  "heliocentric-distance-km"                    = 147106368.79495826                                  //>
//  "heliocentric-velocity"                       = "[-0.016947, -0.00439356, 5.1898e-05]"              //>
//  "heliocentric-velocity-kms"                   = "30.31324"                                          //>
//  "libration_b"                                 = -1.8491122451938982                                 //>
//  "libration_l"                                 = -0.7270627059426571                                 //>
//  "pa_axis"                                     = 338.875856539514                                    //>
//  "penumbral-eclipse-magnitude"                 = 0                                                   //>
//  "phase-angle-dms"                             = "+90°41'33""                                        //>
//  "scale"                                       = 1                                                   //>
//  "umbral-eclipse-magnitude"                    = 0                                                   //>
//  "velocity"                                    = "[-0.000178199, 0.000581518, 5.15247e-05]"          //>
//  "velocity-kms"                                = "1.05686"                                           //>
//  "subsolar_b"                                  = -1.4695135977094504                                 //>
//  "subsolar_l"                                  = 270.8518849754954                                   //>

 function                               ShowConstellations(///////////////////////////////////////////////> Show lines for constellations of interest.
 ){                                     //////////////////////////////////////////////////////////////////>
  ConstellationMgr.deselectConstellations();                                                            //>
  ConstellationMgr.setFlagLines(                     true );                                            //> Constellation lines.
                                                                               core.wait(0.1);          //>
  mapSelect("Alhena"   );                                                                               //> Select stars to turn on constellation lines: Gemini
  mapSelect("Procyon"  );                                                                               //> Canis Minor
  mapSelect("Aldebaran");                                                                               //> Taurus
//mapSelect("Capella"  );                                                                               //>
  mapSelect("Alnitak"  );                                                                               //> Orion
  mapSelect("Hamal"    );                                                                               //> Aries
  mapSelect("Alpherg"  );                                                                               //> Pisces
  mapSelect("Mirfak"   );                                                                               //> Perseus
  mapSelect("Menkar"   );                                                                               //> Cetus
  mapSelect("Zaurak"   );                                                                               //> Eri
  mapSelect("HR 2298"  );                                                                               //> Mono
  mapSelect("Almach"   );                                                                               //>
  mapSelect("Navi"     );                                                                               //> Cassiopia
  mapSelect("Arneb"    );                                                                               //>
  mapSelect("Acubens"  );                                                                               //> Scorpio
  mapSelect("Regulus"  );                                                                               //> Leo
                                                                               core.wait(1);            //>
 }//ShowConstellations////////////////////////////////////////////////////////////////////////////////////>


//Go//////////////////////////////////////////////////////////////////////////////////////////////////////>


 function                               Snap(/////////////////////////////////////////////////////////////> Take a screen shot.
                                        a_sCenter                                                       //> Text description of center of screen shot.
 ,                                      a_sDetails                                                      //> decription of what is turned on in the shot.
 ){                                     //////////////////////////////////////////////////////////////////>
  core.wait(2);                                                                                         //>
  core.screenshot('scr_'+ a_sCenter +'_'+ a_sDetails ,false ,g_sPATHsHOTS ,true ,'png');                //>
 }//Snap//////////////////////////////////////////////////////////////////////////////////////////////////>


 function                               Go_ScreenSnaps(///////////////////////////////////////////////////>
                                        sView
 ){                                     //////////////////////////////////////////////////////////////////>
  MarkerMgr      .deleteAllMarkers();                                                                   //> https://stellarium.org/doc/23.0/classMarkerMgr.html
  StelSkyDrawer.setCustomStarMagnitudeLimit( 5. );                                                      //> Turn off stars.
  ConstellationMgr.setFlagArt(false); ConstellationMgr.setFlagLines(false);                             //>
                                                                                Snap('stars' ,sView);   //>   https://stellarium.org/doc/23.0/classConstellationMgr.html
  StelSkyDrawer.setCustomStarMagnitudeLimit( -99. );                                                    //> Turn off stars.
//ConstellationMgr.setFlagArt( false );                                                                 //> No artwork (just lines).   https://stellarium.org/doc/23.0/classConstellationMgr.html
  ShowConstellations();                                                                                 //> Show lines for constellations of interest.
  core.setSelectedObjectInfo('None');                                                                   //> Turn off display of info.
//core.setGuiVisible(false);                                                                            //> Remove bottom status bar. 
                                                                                Snap('lines' ,sView);   //> Take a screen snapshot.
  ConstellationMgr.setFlagArt(false); ConstellationMgr.setFlagLines(false);                             //>
  for( let i = 0; i < g_a2vDOTS.length; i++ ){                                                          //>
   var                                av                      = g_a2vDOTS[i];                           //>
   if(  ""  != av[g_iDOTS_sId] ){                                                                       //>
    if(       "g" ==av[4]               ){ Mark( av[g_iDOTS_sId ] ,"circle" ,"#00FF00" , 6 ); //. Mark( av[g_iDOTS_sId ] ,""+(i+1) ,"#00FF00" ,15 ); //> Green circle (and number).
                                                                                              //.                                                    //>
    }else if( "p" ==av[4] || "P"==av[4] ){ Mark( av[g_iDOTS_sId ] ,"circle" ,"#00FFFF" ,12 ); //. Mark( av[g_iDOTS_sId ] ,""+(i+1) ,"#00FFFF" ,30 ); //> Blue circle (and number).
                                                                                              //.                                                    //>
    }else if( "pg"==av[4]               ){ Mark( av[g_iDOTS_sId ] ,"circle" ,"#00FFFF" ,12 ); //. Mark( av[g_iDOTS_sId ] ,""+(i+1) ,"#00FFFF" ,30 ); //> Blue circle (and number), but also
                                           Mark( av[g_iDOTS_sId2] ,"circle" ,"#00FF00" , 6 ); //. Mark( av[g_iDOTS_sId2] ,""+(i+1) ,"#00FF00" ,15 ); //> green circle (and number) for 2nd dot.
                                                                                              //.                                                    //>
    }else                                { Mark( av[g_iDOTS_sId ] ,"circle" ,"#FF0000" ,12 ); //. Mark( av[g_iDOTS_sId ] ,""+(i+1) ,"#FF0000" ,30 ); //> Otherwise a red circle (and number).
  }}}//if//if//for i                                                                                  //>
 // GridLinesMgr    .setFlagEclipticJ2000Grid(false);                                                   //> Turn off Ecliptic Grid of J2000.0.
                                                                                Snap('dots'  ,sView);     //>
                                                                                                        //>
  MarkerMgr      .deleteAllMarkers();                                                                   //> https://stellarium.org/doc/23.0/classMarkerMgr.html
  ConstellationMgr.setFlagArt(true ); ConstellationMgr.setArtIntensity( 1 );    Snap('art'  ,sView);     //>
                                                                                                        //>
  ConstellationMgr.setFlagArt(false); ConstellationMgr.setArtIntensity( 0 );                            //>
  for( iPass = -1; iPass <= 1; iPass++ ){                                                               //> D = Declination
   var                                  B                       = iPass*(5 + 9/60);                     //> E = obliquity of the ecliptic (about 23.4°) // 23 + 27/60.;    Moon's orbital inclination: 5 +  9/60 Moon's ecliptic.
   var                                  cosB                    = CosD( B );                            //> B = ecliptic latitude, L = ecliptic longitude
   var                                  sinB                    = SinD( B );                            //> D = declination      , A = Right Ascention
   var                                  tanB                    = TanD( B );                            //>
   for( L = 0; L < 360; L++ ){                                                                          //>
    sinL = SinD( L );   cosL = CosD( L );                                                               //>
    A = Math.atan2(   sinL*cosE - tanB*sinE   ,cosL   )*180/Math.PI;                                    //>
    D = Math.asin(    sinB*cosE + cosB*sinE*sinL      )*180/Math.PI;                                    //>
    MarkerMgr.markerEquatorial( A ,D ,true,true ,"disk" ,"#ffff00" ,2);       //core.wait(0.01);        //> core.output( "dPhi: "+dPhi +", long,"+longD*180/Math.PI +", lat,"+(latD*180/Math.PI) +",   (,"+xD +","+yD +","+zD +",)" ); //>
  }}//for L//for iPass                                                                                  //>
                                                                                 Snap('path' ,sView);   //> Take and save a screen shot.
 }//Go_ScreenSnaps////////////////////////////////////////////////////////////////////////////////////////>


function                                Go(///////////////////////////////////////////////////////////////> Create screen snapshots of celestial sphere with various features turned on.
){                                      //////////////////////////////////////////////////////////////////>
  core.resetOutput();                                                                                   //> Clear output file buffer.
  Reset();                                                                                              //> Clear Stellarium to known state.
//MarkStars();                                                                                          //>
                                                                                                        //>
  core.setObserverLocation( -1.82618827 ,51.17886594 ,0 ,0 ,"Stonehenge" ,"Earth" );                    //> Stonehenge = 51.17886594 ,-1.82618827   Cool location
  core.setTimezone("LMST" ,1);                                                                          //> "LMST" = Local Mean Solar Time    https://stellarium.org/doc/23.0/classStelMainScriptAPI.html#abc7e6a709ec2670b6581ce4b51db3185
  core.setDate( "2026-12-21T00:00:00" ,"LMST" );                                                NAP();  //> Winter solstice, midnight.
  let                                   nDay                    = Math.floor( core.getJDay() );         //> Get the count of days, the noon before midnight.
                                                                                                        //>
  ConstellationMgr.setFlagArt(                  false );                                                //> No constellation images.   https://stellarium.org/doc/23.0/classConstellationMgr.html
  ConstellationMgr.setFlagLines(                 true );                                                //> Constellation lines on.
  LandscapeMgr    .setFlagAtmosphere(           false );                                                //> No atmosphere effects.   https://stellarium.org/doc/23.0/classLandscapeMgr.html
  SolarSystem     .setFlagPlanets (             false );                                                //> Don't show planets.
  StelSkyDrawer   .setAbsoluteStarScale(          2.0 );                                                //> Set the absolute star brightness scale.
  StelSkyDrawer   .setFlagDrawBigStarHalo(      false );                                                //> Set flag for drawing a halo around bright stars.
  StelSkyDrawer   .setFlagStarMagnitudeLimit(   true  );                                                //> Toggle the application of user-defined star magnitude limit.
  StelSkyDrawer   .setCustomStarMagnitudeLimit(   5.0 );                                                //> Sets a lower limit for star magnitudes (anything fainter (greater) is ignored).
  StelSkyDrawer   .setFlagLuminanceAdaptation(  false );                                                //> Set the value of the eye adaptation flag.
  NebulaMgr       .setFlagShow(                 false );                                                //>
  MilkyWay        .setFlagShow(                 false );                                                //> Don't show Milky Way.   https://stellarium.org/doc/24.0/classMilkyWay.html#ac365cf02f2019b6485337a6c48cec5cb   core.setMilkyWayVisible( false );                                                                     //>
                                                                                                        //>
  const                                 cosE                    = CosD( 23. + 27./60. );                //> Convert ecliptic coords to equatorial.
  const                                 sinE                    = SinD( 23. + 27./60. );                //> tanL = ( sinAcosE + TanDsinE )/cosA       https://en.wikipedia.org/wiki/Astronomical_coordinate_systems#Equatorial_.E2.86.90.E2.86.92_ecliptic
  var                                   sinL                    = 0;                                    //> sinB = SinDcosE  - CosDsinEsinA
  var                                   cosL                    = 0;                                    //> A = Right Ascention
  Look( 90 - 51.17886594 + 23.43602467002239  ,180              ,100 ,3 );                              //> Look South, up to ecliptic.
  Go_ScreenSnaps("south"   );                                                                           //>
  let                                   map                     = mapSelect("HR 1165");                 //> Alcyone - Brightest of 7 sisters.
  Look( map["altitude"]                       ,map["azimuth"]   ,100 ,3 );                              //> Look at Seven Sisters, sky view, slow.
  Go_ScreenSnaps("pleiades");                                                                           //>
                                                                                                        //>
  core.setSelectedObjectInfo('AllInfo');                                                                //> Reset this for benefit of user.
  core.output("Th-th-that's all folks." );                                                              //>
                                                                                                        //>
  core.saveOutputAs( g_sPATHsHOTS + "output.txt" );                                                     //> Write results to file system, same directory as the screen shots.
}//Go(){}/////////////////////////////////////////////////////////////////////////////////////////////////>


Go();



//////////////////////////////////////////////////////////////////////////////////////////////////////////>
//////////////////////////////////////////////////////////////////////////////////////////////////////////>
//////////////////////////////////////////////////////////////////////////////////////////////////////////>



function                                TEST_GreatCircle(/////////////////////////////////////////////////> Implement formulae from web, compare to expected results.   https://www.aa.quae.nl/en/reken/grootcirkel.html
){                                      //////////////////////////////////////////////////////////////////>
  let                                   a_lat                   = 52.37;                                //> Amsterdam     52 22' N     4 54' E
  let                                   a_long                  =  4.9 ;                                //>
  let                                   long1                   = a_long*Math.PI/180;                   //> Call the polar coordinates (longitude and
  let                                   lat1                    = a_lat *Math.PI/180;                   //> latitude) of the first city
  let                                   x1                      = CosR(long1)*CosR(lat1);               //>
  let                                   y1                      = SinR(long1)*CosR(lat1);               //>
  let                                   z1                      =             SinR(lat1);               // core.output( "P1, "+a_lat +", "+a_long +" : "+long1 +", "+ lat1 +"   ("+ x1 +", "+ y1 +", "+z1 +")"); //>
  a_lat                                                         =   37.77;                              //> San Francisco 37 46' N   122 25' W
  a_long                                                        = -122.42;                              //>
  let                                   long2                   = a_long*Math.PI/180;                   //> Call the polar coordinates (longitude and
  let                                   lat2                    = a_lat *Math.PI/180;                   //> latitude) of the first city
  let                                   x2                      = CosR(long2)*CosR(lat2);               //>
  let                                   y2                      = SinR(long2)*CosR(lat2);               //>
  let                                   z2                      =             SinR(lat2);               // core.output( "P2, "+a_lat +", "+a_long +" : "+long2 +", "+ lat2 +"   ("+ x2 +", "+ y2 +", "+z2 +")"); //>
  let                                   dPsi                    = Math.acos(x1*x2 + y1*y2 + z1*z2);     //> Angular distance between 2 points.
  let                                   x3                      = ( x2 - x1*CosR(dPsi) ) / SinR(dPsi);  //>
  let                                   y3                      = ( y2 - y1*CosR(dPsi) ) / SinR(dPsi);  //>
  let                                   z3                      = ( z2 - z1*CosR(dPsi) ) / SinR(dPsi);  //>
  let                                   lat3                    = Math.asin(z3);                        //> Back to polar latitude and
  let                                   long3                   = Math.atan2(y3 ,x3);                   //> longitude result.
                                                                                                        // core.output( "dPsi, "+ dPsi +", " + 180*dPsi/Math.PI ); core.output( "(,"+x3 +","+y3 +","+z3  +",) long,"+ long3*180/Math.PI +", lat," + (lat3*180/Math.PI) );
  for( let dPhi = 0; dPhi < 2; dPhi += 0.1 ){                                                           //> DOTTED LINE
// for( let dPhi = 8.98335*Math.PI/180; dPhi < 2 *100; dPhi += 0.2 *999999 ){                           //>
  let                                   xD                      = x1*CosR(dPhi) + x3*SinR(dPhi);        //>
  let                                   yD                      = y1*CosR(dPhi) + y3*SinR(dPhi);        //>
  let                                   zD                      = z1*CosR(dPhi) + z3*SinR(dPhi);        //>
  let                                   latD                    = Math.asin(  zD     );                 //> Back to polar
  let                                   longD                   = Math.atan2( yD ,xD );                 //> result.
  MarkerMgr.markerEquatorial( longD*180/Math.PI ,latD*180/Math.PI ,true,true ,"cross" ,"#ffff00" ,8);   //> core.output( "dPhi: "+dPhi +", long,"+longD*180/Math.PI +", lat,"+(latD*180/Math.PI) +",   (,"+xD +","+yD +","+zD +",)" ); //>
 }//for dPhi                                                                                            //>
// What is the distance from an arbitrary point Q to the great circle through P1 and P2, measured along the surface perpendicular to the great circle?
// The short answer is that that distance d is determined by
//        sin(d) =    Q^ . (P1^ x P2^)        where . = dot product, x = cross product, ^ = unit vector
//                  /   |P1^ x P2^|           where || = length
// P1, P2 are stars in Canis Minor, Q is moon, WHAT IS SIGN?
// For example, how far from the great circle through Amsterdam (P₁) and San Francisco (P₂) is the airport of Reykjavik in Iceland (Q, at 64.13° north lattiude and 21.94° west longitude)?
 core.output( "Amsterdam: ("+ x1 +", "+ y1 +", "+ z1 +")");                                             //>
 core.output( "San Fran:  ("+ x2 +", "+ y2 +", "+ z2 +")");                                             //>
 a_lat            =    64.13;                                                                           //> 64.13° north lattiude
 a_long           =   -21.94;                                                                           //> 21.94° west longitude)
 let                                    longQ                   = a_long*Math.PI/180;                   //> Call the polar coordinates (longitude and
 let                                    latQ                    = a_lat *Math.PI/180;                   //> latitude) of the first city
 let                                    xQ                      = CosR(longQ)*CosR(latQ);               //>
 let                                    yQ                      = SinR(longQ)*CosR(latQ);               //>
 let                                    zQ                      =             SinR(latQ);               //>
 core.output( "Q, "+a_lat +", "+a_long +" : "+longQ +", "+latQ  +"   ("+ xQ +", "+ yQ +", "+ zQ +")");  //>
 let                                    xS                      =  y1*z2 - z1*y2;                       //> a2b3 - a3b2
 let                                    yS                      =  z1*x2 - x1*z2;                       //> a3b1 - a1b3
 let                                    zS                      =  x1*y2 - y1*x2;                       //> a1b2 - a2b1
 let                                    dS                      = Math.sqrt( xS*xS + yS*yS + zS*zS );   //>
 core.output( "S, "+ xS +", " + yS +", "+ zS +", "+ dS );                                               //>
 let                                    dDotQS                  =            xS*xQ + yS*yQ + zS*zQ  ;   //>
 core.output( "Q.S, "+ dDotQS +", "+ Math.asin(dDotQS/dS)*180/Math.PI );                                //>
}//TEST_GreatCircle///////////////////////////////////////////////////////////////////////////////////////>


function                                TEST_dOverLine_360(///////////////////////////////////////////////> Test the above code graphically.
){                                      //////////////////////////////////////////////////////////////////>
  let                                   map                     = mapSelect("Procyon");;                //> Refresh info about the star.
  let                                   dALat                   = map["decJ2000"];                      //>
  let                                   dALong                  = map["raJ2000" ];                      //>
                                                                                                        //>
  map                                                           = mapSelect("Gomeisa");                 //> Refresh info about the star.
  let                                   dBLat                   = map["decJ2000"];                      //>
  let                                   dBLong                  = map["raJ2000" ];                      //>
  let                                   r                       = "";                                   //>
  let                                   as                      = [                                     //>
           "1 Gem"     ,"2 Gem"     ,"3 Gem"   ,"4 Gem"   ,"5 Gem"  ,"6 Gem"  ,"7 Gem"     ,"8 Gem"     //>
          ,"9 Gem"     ,"10 Gem"    ,"11 Gem"  ,"12 Gem"  ,"13 Gem" ,"14 Gem" ,"15 Gem"    ,"16 Gem"    //> "17 Gem" ,
          ,"18 Gem"    ,"19 Gem"    ,"20 Gem"                                                           //> "21 Gem" ,
          ,"22 Gem"    ,"23 Gem"    ,"24 Gem"  ,"25 Gem"  ,"26 Gem" ,"27 Gem" ,"28 Gem"                 //> "29 Gem" ,
          ,"30 Gem"    ,"31 Gem"    ,"32 Gem"  ,"33 Gem"  ,"34 Gem" ,"35 Gem" ,"36 Gem"    ,"37 Gem"    //>
          ,"38 Gem"    ,"39 Gem"    ,"40 Gem"  ,"41 Gem"  ,"42 Gem" ,"43 Gem" ,"44 Gem"    ,"45 Gem"    //>
          ,"46 Gem"    ,"47 Gem"    ,"48 Gem"  ,"49 Gem"                                                //> "50 Gem" ,
          ,"51 Gem"    ,"52 Gem"    ,"53 Gem"  ,"54 Gem"  ,"55 Gem" ,"56 Gem" ,"57 Gem"    ,"58 Gem"    //>
          ,"59 Gem"    ,"60 Gem"    ,"61 Gem"  ,"62 Gem"  ,"63 Gem" ,"64 Gem" ,"65 Gem"    ,"66 Gem"    //>
          ,"67 Gem"    ,"68 Gem"    ,"69 Gem"  ,"70 Gem"  ,"71 Gem"                                     //> "72 Gem" ,"73 Gem" ,
          ,"74 Gem"    ,"75 Gem"    ,"76 Gem"  ,"77 Gem"  ,"78 Gem" ,"79 Gem" ,"80 Gem"    ,"81 Gem"    //>
          ,"82 Gem"    ,"83 Gem"    ,"84 Gem"  ,"85 Gem"                                                //> "86 Gem" ,
          ,"87 Gem"    ,"1 CMi"     ,"2 CMi"   ,"3 CMi"   ,"4 CMi"  ,"5 CMi"  ,"6 CMi"     ,"7 CMi"     //>
          ,"8 CMi"     ,"9 CMi"     ,"10 CMi"  ,"11 CMi"                                                //> "12 CMi" ,
          ,"13 CMi"    ,"14 CMi"    ,"1 Aur"   ,"2 Aur"   ,"3 Aur"  ,"4 Aur"  ,"5 Aur"     ,"6 Aur"     //>
          ,"7 Aur"     ,"8 Aur"     ,"9 Aur"   ,"10 Aur"  ,"11 Aur"                                     //> "12 Aur" ,
          ,"13 Aur"    ,"14 Aur"    ,"15 Aur"  ,"16 Aur"  ,"17 Aur" ,"18 Aur" ,"19 Aur"    ,"20 Aur"    //>
          ,"21 Aur"    ,"22 Aur"    ,"23 Aur"  ,"24 Aur"  ,"25 Aur" ,"26 Aur" ,"HIP 28500" ,"HIP 28417" //>
          ,"HIP 28327" ,"HIP 28697" ,"136 Tau" ,"139 Tau"         ];                                    //>
  for( let i = 0; i < as.length; i++ ){                                                                 //>
   core.output(r);                                                                                      //>
   map = mapSelect(r);                                                                                  //>
   Mark(  r,"disk" ,dOverLine_360(map["decJ2000"],map["raJ2000"]) < 0  ?"#ff0000"  :"#00ff00" ,10  );   //>
  }//for i                                                                                              //>
}//TEST_dOverLine_360/////////////////////////////////////////////////////////////////////////////////////>


//End of file

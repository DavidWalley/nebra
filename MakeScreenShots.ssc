// NEBRA/code/nebra/MakeScreenShots.ssc - Stellarium script for generating sky disc views suitable for use as imports to InkScape, or animation frames for ffmpeg conversion.
// Name: MakeScreenShots
// License: (c)2024 David C. Walley
// Author: David C. Walley
// Version: 0.1
// Description:

// (c)2025 David C. Walley
// 1) Edit hard-coded stuff in this file.
// 2) Run using .../NEBRA/code/nebra/ToolChain_MakeScreenShots.hx   See more documentation there.

const                                   g_isVERSION   =    "€VERSION";                                  //> Macro replaced with "ALIGNMENTS" "FRAMES". In UBUNTU terminal - setxkbmap "us(euro)" # Right Alt+5 should give "€".
const                                   g_sPATHsHOTS  = // "/home/dave/Desktop/CODE/lunascope/frames/"; //>
                                                        // "/home/dave/Desktop/CODE/nebra/animation/";  //>
                                                        // "/media/dave/Blk7/AAA/stellarium_tonight/";  //> External drive.
                                                           "/media/dave/big_vol/data/";
// import bitmap.*;                                                                                     //> https://lib.haxe.org/p/bitmap/
// import bitmap.transformation.Convolution;
// let                     bitmap = PNGBitmap.create(IOUtil.readFile("imgs/input.png"));
// bitmap.draw.rectangle(  {x: 10 ,y: 20   ,width: 40 ,height: 22
//                         ,c: Color.create(12, 144, 0, 131)
//                         ,fill: false
//                         }
// );
// bitmap.transform.convolve( Convolution.blur(7, 0.7) );
// IOUtil.writeBitmap( "imgs/output.png" ,bitmap );

const                   g_dOBSERVERlONG                         = -1.82618827;
const                   g_dOBSERVERlAT                          = 51.17886594;
//. 1) 51.5 degree latitude - Nebra and Stonehenge share this latitude. What is special about it?
//.                         - At this latitude, Vega on the edge of the circumpolar stars, kisses horizon.
//.                         - Bottom arc appears to correspond to Vega's path around winter solstice.
//.                         - Tilt of arc consistent with path on winter solstice night, kissing horizon near (but after) midnight.
//.                         - Capella is only other circumpolar star close to Vega's brightness.
//.                         - Capella does not reach horizon but comes close, path is closer to upper edge of arc.
//.                         - Capella comes close near summer solstice - opposite of Vega in sky and seasons.
//.                         - Lines in arc might represent other geographic locations, other centuries, or other (dimmer) stars
//. 2) Pleiades cluster     - broad agreement.
//.                         - size consistent with size of full moon.
//.                         - High in sky in winter, not visible in summer.
//. 3) Rotate and scale     - use Pleiades as common pivot point, although any of the dots in cluster might be the pivot.
//.                         - Dots roughly align to Aldeberan and other Taurus stars, Aires and eastern fish of Pisces.
//.                         - left half of disc does not show any good alignments.
//. 4) Plot Moon's ecliptic - southern edge through center of full moon, northern edge is tangent.
//. 5) Some stars on edge   - 2, 26, 30 are not as bright, but might be chosen to define Moon's ecliptic
//. 6) Crescent to Full     - Implies time period of about 7 or 8 days, from last crescent to full
//.                         - Implies voyage across celestial sphere.
//.                         - Near winter solstice, this voyage is from Pisces to Taurus or Gemini.


  let                   g_iDOTS_dot                             = 0 ;                                   //>
  let                   g_iDOTS_x                               = 1 ;                                   //>
  let                   g_iDOTS_y                               = 2 ;                                   //>
  let                   g_iDOTS_sName                           = 3 ;                                   //>
  let                   g_iDOTS_sId                             = 4 ;                                   //>
  let                   g_iDOTS_sView                           = 5 ;                                   //>
  let                   g_iDOTS_sConst                          = 6 ;                                   //>
  let                   g_iDOTS_sName2                          = 7 ;                                   //>
  let                   g_iDOTS_sId2                            = 8 ;                                   //>
  let                   g_iDOTS_dElat                           = 9 ;                                   //>
  let                   g_iDOTS_dElong                          = 10;                                   //>
  let                   g_iDOTS_dDec                            = 11;                                   //>
  let                   g_iDOTS_dRa                             = 12;                                   //>
  let                   g_iDOTS_dMag                            = 13;                                   //>
  const                 g_a2vDOTS                               =                                       //> COPIED FROM lunascope.ssc:
 //  0      1        2                     3          4       5      6      7                   8             9           10          11           12            13    //> COPIED TO Lunascope_svg.hx
 //  DOT (x,y) of dots       star name             desig      view  const   name2               id1         elat         elong        dec          RA            Mag   //> Table of Nebra Sky Disc dots and associated stars:
   [[1  ,108.1498 ,18.1577  ,""                   ,"HR 1656" ,"p"  ,"Tau" ,"m Tau"            ,"HIP 23835" ,-4.22757736 ,77.53867299 ,18.64563797 ,76.872793943 ,4.90] //> 0  m Tau
   ,[2  ,126.3757 ,25.09133 ,""                   ,"HR 1554" ,"p"  ,"Tau" ,"HIP 22697"        ,"HIP 22697" ,5.321147746 ,75.13733004 ,27.89789880 ,73.202952944 ,5.95] //> 1
   ,[3  ,70.83071 ,28.24098 ,""                   ,"HR 2891" , "g" ,"Gem" ,"Castor"           ,"HIP 36850" ,10.09375094 ,110.2445114 ,31.88560856 ,113.65401298 ,1.90] //> 2  HR 2891   36850   α Gem   Gem     From its ancient Greek name Κάστωρ, a character in Greek mythology, the twin of Pollux (β Gem). Reapplied in Renaissance times. Greek   Kunitzsch, Paul; Smart, Tim (2006). A Dictionary of Modern star Names: A Short Guide to 254 Star Names and Their Derivations (2nd rev. ed.). Cambridge, Massachusetts: Sky Pub.
   ,[4  ,96.88832 ,31.32991 ,"Aldebaran"          ,"HR 1457" ,"p"  ,"Tau" ,"Aldebaran"        ,"HIP 21421" ,-5.46902602 ,69.79493535 ,16.50842997 ,68.986323401 ,0.85] //> 3  HR 1457   21421   α Tau   Tau     Applied in medieval times from its ind-A name al-dabaran, possibly meaning "the Follower," alternatively used as the lunar mansion name for all the Hyades (or again for α Tau alone). The name is thought to refer to this star's following the Pleiades across the sky, or to the Hyades (or α Tau) coming after the Pleiades as a lunar mansion. "Aldebaran" is one of the oldest Arabic star names applied in the West, from the end of the 10th century A.D.       Arabic  Kunitzsch, Paul; Smart, Tim (2006). A Dictionary of Modern star Names: A Short Guide to 254 Star Names and Their Derivations (2nd rev. ed.). Cambridge, Massachusetts: Sky Pub.
   ,[5  ,57.53873 ,40.46251 ,""                   ,"HR 2905" , "g" ,"Gem" ,"υ Gem"            ,"HIP 36962" ,5.214980108 ,111.3497335 ,26.89384299 ,113.98638207 ,4.05] //> 4
   ,[6  ,83.44666 ,46.62984 ,""                   ,"HR 1239" ,"p"  ,"Tau" ,"λ Tau"            ,"HIP 18724" ,-7.96025099 ,60.63957058 ,12.49090067 ,60.175190376 ,3.40] //> 5
   ,[6  ,-999     ,-999     ,""                   ,"HR 2697" , "g" ,"Gem" ,"τ Gem"            ,"HIP 34693" ,7.753792736 ,105.4497733 ,30.24383889 ,107.79100553 ,4.40]
   ,[7  ,112.1699 ,46.02002 ,""                   ,"HR 1256" ,"p"  ,"Tau" ,"A1 Tau"           ,"HIP 19038" ,1.259198008 ,63.46112813 ,22.08241414 ,61.180044518 ,4.34] //> 7
   ,[7  ,-999     ,-999     ,""                   ,"HR 2540" , "g" ,"Gem" ,"θ Gem"            ,"HIP 33018" ,11.02960860 ,101.1293019 ,33.96015699 ,103.20412524 ,3.59] //> 8
   ,[8  ,124.5944 ,40.92313 ,"Pleiades: Asterope" ,"HR 1151" ,"P"  ,"Tau" ,"Asterope"         ,"HIP 17579" ,4.567966892 ,59.74484169 ,24.55548105 ,56.482481616 ,5.75] //> 9  HR 1151   17579   21 Tau  Tau     These names were individually applied in Renaissance times from a family of characters in Greek mythology: Atlas, Pleione and their seven daughters, the Pleiades.
   ,[9  ,121.0292 ,48.75188 ,"Pleiades: Maia"     ,"HR 1149" ,"P"  ,"Tau" ,"Maia"             ,"HIP 17573" ,4.389866533 ,59.68549106 ,24.36871969 ,56.462195999 ,3.84] //> 10
   ,[10 ,131.831  ,50.85698 ,"Atik"               ,"HR 1203" ,"p"  ,"Per" ,"ζ Per"            ,"HIP 18246" ,11.33393540 ,63.12917675 ,31.88515447 ,58.538914573 ,2.80] //> 11
   ,[11 ,112.4277 ,54.75468 ,"Pleiades: Alcyone"  ,"HR 1165" ,"P"  ,"Tau" ,"Alcyone"          ,"HIP 17702" ,4.050899728 ,59.99748894 ,24.10618542 ,56.876600512 ,2.84] //> 12
   ,[12 ,128.7177 ,58.49874 ,"Pleiades: Electra"  ,"HR 1142" ,"P"  ,"Tau" ,"Electra"          ,"HIP 17499" ,4.189786908 ,59.41698059 ,24.11439627 ,56.224319838 ,3.70] //> 13
   ,[13 ,120.2459 ,61.54713 ,"Pleiades: Merope"   ,"HR 1156" ,"P"  ,"Tau" ,"Merope"           ,"HIP 17608" ,3.955643081 ,59.70436670 ,23.94927508 ,56.587017801 ,4.09] //> 14
   ,[14 ,154.2186 ,44.34876 ,""                   ,""        ,""                                                                                                     ] //> 15 ???
   ,[15 ,53.85233 ,64.36998 ,""                   ,"HR 2777" , "g" ,"Gem" ,"Wasat"            ,"HIP 35550" ,-0.17844208 ,108.5246902 ,21.98152794 ,110.03649036 ,3.5 ] //> 16 HR 2777  35550   δ Gem   Gem     From the Arabic word wasat, "middle," used by a sci-A commentator who was speculating on the meaning of the ind-A constellation name al-jauza'. Reference was made to al-jauza's being in the "middle" (wasat) of the sky (perhaps meaning the celestial equator). The reference was intended to apply to the ind-A figure located in today's Orion, however it was under the constellation which is today Gemini that the reference appeared (note the confusion between Orion and Gemini mentioned under α Ori). Therefore, after  transliteration into Latin, it was in Gemini (to δ) that the word "Wasat" was arbitrarily applied as a star name in recent times.  Arabic
   ,[16 ,35.4     ,81.51411 ,""                   ,"HR 2763" , "g" ,"Gem" ,"λ Gem"            ,"HIP 35350" ,-5.63533629 ,108.7840055 ,16.53956000 ,109.52854314 ,3.55] //> 17
   ,[17 ,38.3646  ,81.51411 ,""                   ,""        ,""                                                                                                     ] //> 18
   ,[18 ,123.5546 ,81.93696 ,"Bahrani"            ,"HR 838"  ,"p"  ,"Ari" ,"Bharani"          ,"HIP 13209" ,10.44940709 ,48.20824285 ,27.26160756 ,42.501043704 ,3.59] //> 19 HR 838   6193    41  Ari Ari
   ,[19 ,141.7191 ,78.15144 ,""                   ,"HR 840"  ,"p"  ,"Per" ,"16 Per"           ,"HIP 13254" ,20.94327211 ,51.84192759 ,38.32052223 ,42.653086066 ,4.20] //> 20
   ,[20 ,50.30947 ,98.89025 ,""                   ,"HR 2615" , "g" ,"Gem" ,"41 Gem"           ,"HIP 33715" ,-6.60175956 ,104.5677183 ,16.07857180 ,105.07171491 ,5.70] //> 21
   ,[21 ,119.1031 ,102.6168 ,"Hamal"              ,"HR 617"  ,"p"  ,"Ari" ,"Hamal"            ,"HIP 9884"  ,9.964961307 ,37.66700911 ,23.46380209 ,31.797982866 ,2   ] //> 22 HR 617   9884    α Ari   Ari     Applied in recent times from the Arabic constellation name, al-hamal, "the Lamb", for Aries. al-hamal seems to belong to those zodiacal constellation names already known in Arabic times.
   ,[22 ,47.5255  ,118.5022 ,""                   ,"HR 2484" , "g" ,"Gem" ,"Alzirr"           ,"HIP 32362" ,-10.1055159 ,101.2142292 ,12.89389186 ,101.32730563 ,3.34] //> 23 HR 2484  32362   ξ Gem   Gem
   ,[23 ,70.8448  ,117.6285 ,""                   ,"HR 489"  ,"p"  ,"Psc" ,"ν Psc"            ,"HIP 7884"  ,-4.69444433 ,25.50897990 ,5.488188234 ,25.360276799 ,4.45] //> 24
   ,[23 ,-999     ,-999     ,"Alhena"             ,"HR 2421" , "g" ,"Gem" ,"Alhena"           ,"HIP 31681" ,-6.74285099 ,99.11047785 ,16.39856993 ,99.433987651 ,1.90] //> 25  HR 2421 31681   γ Gem   Gem     Applied in recent times from the ind-A lunar mansion name al-bana, possibly meaning "the Mark on the Neck of a Camel," for γ and ξ Gem, or alternatively for γ, ξ, η, μ, and v Gem.     Arabic  Kunitzsch, Paul; Smart, Tim (2006). A Dictionary of Modern star Names: A Short Guide to 254 Star Names and Their Derivations (2nd rev. ed.). Cambridge, Massachusetts: Sky Pub.
   ,[24 ,95.72604 ,118.7353 ,"Alpherg"            ,"HR 437"  ,"p"  ,"Psc" ,"Alpherg"          ,"HIP 7097"  ,5.378117061 ,26.81899773 ,15.34735745 ,22.873628886 ,7.50] //> 26
   ,[24 ,-999     ,-999     ,""                   ,"HR 2216" , "g" ,"Gem" ,"Propus"           ,"HIP 29655" ,-0.88798880 ,93.44149225 ,22.50679947 ,93.725164695 ,6.00] //> 27 HR 437   7097    η Psc   Psc              HR 2216        29655   η Gem   Gem     Applied in Renaissance times from the Greek word πρόπους, "forward foot", used by Ptolemy in the Almagest in describing this star.      Greek   Kunitzsch, Paul; Smart, Tim (2006). A Dictionary of Modern star Names: A Short Guide to 254 Star Names and Their Derivations (2nd rev. ed.). Cambridge, Massachusetts: Sky Pub.
   ,[25 ,116.5119 ,127.7836 ,""                   ,"HR 360"  ,"p"  ,"Psc" ,"φ Psc"            ,"HIP 5742"  ,15.50440164 ,26.46211602 ,24.58583222 ,18.439532440 ,4.65] //> 28
   ,[26 ,139.006  ,130.4405 ,""                   ,"HR 291"  ,"p"  ,"Psc" ,"σ Psc"            ,"HIP 4889"  ,23.08246361 ,27.21562523 ,31.80697757 ,15.706610523 ,5.5 ] //> 29
   ,[27 ,156.8717 ,121.4289 ,""                   ,"HR 226"  ,"p"  ,"And" ,"ν And"            ,"HIP 3881"  ,32.56464840 ,29.15283671 ,41.08248596 ,12.455510973 ,4.5 ] //> 30
   ,[27 ,-999     ,-999     ,"Elnath"             ,"HR 1791" , "g" ,"Tau" ,"Elnath"           ,"HIP 25428" ,5.383700043 ,82.58064369 ,28.60636790 ,81.579526761 ,1.65] //> 31 HR 1791  25428   β Tau   Tau
   ,[28 ,63.38372 ,133.7863 ,""                   ,"HR 392"  ,"p"  ,"Cet" ,"HIP 6432"         ,"HIP 6432"  ,-6.46643162 ,19.73315074 ,1.726187942 ,20.656586845 ,6.20] //> 32
   ,[28 ,-999     ,-999     ,""                   ,"HR 2287" , "g" ,"Ori" ,"HIP 30318"        ,"HIP 30318" ,-10.7591056 ,95.62021449 ,12.56987478 ,95.657125881 ,6.00] //> 33
   ,[29 ,85.68202 ,138.646  ,""                   ,"HR 294"  ,"p"  ,"Psc" ,"ε Psc"            ,"HIP 4906"  ,1.094383099 ,17.52672400 ,7.891193773 ,15.736929963 ,4.25] //> 34
   ,[29 ,-999     ,-999     ,""                   ,"HR 2159" , "g" ,"Ori" ,"ν Ori"            ,"HIP 29038" ,-8.65875821 ,91.85748091 ,14.76827729 ,91.899060953 ,4.40] //> 35
   ,[30 ,101.2925 ,141.9865 ,""                   ,"HR 211"  ,"p"  ,"Psc" ,"57 Psc"           ,"HIP 3632"  ,9.642026823 ,16.77406568 ,15.47672950 ,11.638382861 ,5.34] //> 36
   ,[30 ,-999     ,-999     ,""                   ,"HR 1990" , "g" ,"Tau" ,"130 Tau"          ,"HIP 27338" ,-5.67742169 ,86.99949122 ,17.72921298 ,86.865201882 ,5.45] //> 37
   ,[31 ,123.8151 ,145.3032 ,"Tianguan"           ,"HR 1910" , "g" ,"Tau" ,"Tianguan"         ,"HIP 26451" ,-2.19574353 ,84.79039795 ,21.14263598 ,84.417365391 ,2.95] //> 38 HR 1910  26451   ζ Tau   Tau     Chinese single star asterism, a celestial pass along the ecliptic which opens and closes        Chinese Rufus+Tien (1945) on the Suzhou Map, Sun and Kistemaker (1997) evaluating Han sources, Sun Shuwei (2022) on the Su Song Map
// ,[32 ,171.1209 ,60.48165 ,""                   ,""        ,""                                                                                                     ] //> 32
// ,[33 ,173.9899 ,93.61537 ,""                   ,""        ,""                                                                                                     ] //> 33
   ,[50 ,0        ,0        ,"Polaris"            ,"HIP 11767" ,"z","UMi" ,"Polaris"          ,"HIP 11767" ,66.10151875 ,88.58259182 ,89.26883221 ,38.253136404 ,1.95]
   ,[51 ,0        ,0        ,"Vega"               ,"HIP 91262" ,"z","Lyr" ,"Vega"             ,"HIP 91262" ,61.73672951 ,285.3068417 ,38.78692090 ,-80.77167827 ,0   ]
   ,[52 ,0        ,0        ,"Procyon"            ,"HIP 37279" ,"z","CMi" ,"Procyon"          ,"HIP 37279" ,-16.0274910 ,115.7867482 ,5.217023103 ,114.82527538 ,0.40]
   ,[53 ,0        ,0        ,"Gomeisa"            ,"HIP 36188" ,"z","CMi" ,"Gomeisa"          ,"HIP 36188" ,-13.4869151 ,112.1969295 ,8.288834367 ,111.79279198 ,2.84]
   ,[54 ,0        ,0        ,"Dubhe"              ,"HIP 54061" ,"z","UMa" ,"Dubhe"            ,"HIP 54061" ,49.67750268 ,135.2017969 ,61.74708322 ,165.93325947 ,2   ]
   ,[55 ,0        ,0        ,"Merak"              ,"HIP 53910" ,"z","UMa" ,"Merak"            ,"HIP 53910" ,45.13027309 ,139.4407262 ,56.37781083 ,165.46409787 ,2.30]

   ,[56 ,0        ,0        ,"Caph"               ,"HIP 746"   ,"z","Cas" ,"Caph"             ,"HIP 746"   ,51.22158910 ,35.12856093 ,59.15962753 ,2.2976013387 ,2.25] //> "Schedar Navi    Ruchbah  Segin"
   ,[57 ,0        ,0        ,"Capella"            ,"HIP 24608" ,"z","Aur" ,"Capella"          ,"HIP 24608" ,22.86115616 ,81.86497229 ,45.99540741 ,79.182016772 ,0.04]

   ,[58 ,0        ,0        ,"Arcturus"           ,"HIP 69673" ,"z","Boo" ,"Arcturus"         ,"HIP 69673" ,30.71553411 ,204.2302913 ,19.16440114 ,-146.0959120 ,0.15]
   ,[59 ,0        ,0        ,"Altair"             ,"HIP 97649" ,"z","Aql" ,"Altair"           ,"HIP 97649" ,29.30697265 ,301.7761452 ,8.871712428 ,-62.30515852 ,0.75]
   ,[60 ,0        ,0        ,"Asellus Australis"  ,"HIP 42911" ,"z","Cnc" ,"Asellus Australis","HIP 42911" ,0.075414085 ,128.7268240 ,18.15134589 ,131.17567209 ,3.90]
   ,[61 ,0        ,0        ,"Regulus"            ,"HIP 49669" ,"z","Leo" ,"Regulus"          ,"HIP 49669" ,0.464502247 ,149.8300113 ,11.96657981 ,152.09367882 ,1.35]
   ,[62 ,0        ,0        ,"Algenubi"           ,"HIP 47908" ,"z","Leo" ,"Algenubi"         ,"HIP 47908" ,9.714469470 ,140.7081828 ,23.77228787 ,146.46582854 ,2.95]
   ,[63 ,0        ,0        ,"Denebola"           ,"HIP 57632" ,"z","Leo" ,"Denebola"         ,"HIP 57632" ,12.26329780 ,171.6151954 ,14.56971764 ,177.26124965 ,2.09]
   ,[64 ,0        ,0        ,"Spica"              ,"HIP 65474" ,"z","Vir" ,"Spica"            ,"HIP 65474" ,-2.05468189 ,203.8387318 ,-11.1605214 ,-158.7043076 ,0.95]
   ,[65 ,0        ,0        ,"Zubenelgenubi"      ,"HIP 72622" ,"z","Lib" ,"Zubenelgenubi"    ,"HIP 72622" ,0.332309911 ,225.0778874 ,-16.0411028 ,-137.2853445 ,2.75]
   ,[66 ,0        ,0        ,"Sadalmelik"         ,"HIP 109074","z","Aqr" ,"Sadalmelik"       ,"HIP 109074",10.66238731 ,333.3500316 ,-0.31993785 ,-28.55654312 ,2.95]
   ,[67 ,0        ,0        ,"Deneb Algedi"       ,"HIP 107556","z","Cap" ,"Deneb Algedi"     ,"HIP 107556",-2.60371939 ,323.5401637 ,-16.1300069 ,-33.24145134 ,2.84]
   ,[68 ,0        ,0        ,"Nunki"              ,"HIP 92855" ,"z","Sgr" ,"Nunki"            ,"HIP 92855" ,-3.45006572 ,282.3797355 ,-26.2977879 ,-76.18978347 ,2.05]
   ,[69 ,0        ,0        ,"Antares"            ,"HIP 80763" ,"z","Sco" ,"Antares"          ,"HIP 80763" ,-4.57000141 ,249.7567861 ,-26.4312042 ,-112.6541497 ,1.04]
   ,[69 ,0        ,0        ,"Antares"            ,"HIP 80763" ,"z","Sco" ,"Antares"          ,"HIP 80763" ,-4.57000141 ,249.7567861 ,-26.4312042 ,-112.6541497 ,1.04]
   ,[69 ,0        ,0        ,"Syrma"              ,"Syrma"     ,"z"                                                                                                  ]
   ,[69 ,0        ,0        ,"Acrab"              ,"Acrab"     ,"z"                                                                                                  ]
   ,[69 ,0        ,0        ,"Dabih"              ,"Dabih"     ,"z"                                                                                                  ]
   ,[69 ,0        ,0        ,"Ancha"              ,"Ancha"     ,"z"                                                                                                  ]
                                          ];                                                            //>

//function                              SinR(a){    return Math.sin( a             ); }                 //> Code convenience: sin, in radians.
//function                              CosR(a){    return Math.cos( a             ); }                 //> Code convenience: cos, in radians.
//function                              TanR(a){    return Math.tan( a             ); }                 //> Code convenience: tan, in radians.
function                                SinD(a){    return Math.sin( a*Math.PI/180 ); }                 //> Code convenience: sin, in degrees.
function                                CosD(a){    return Math.cos( a*Math.PI/180 ); }                 //> Code convenience: cos, in degrees.
function                                TanD(a){    return Math.tan( a*Math.PI/180 ); }                 //> Code convenience: cos, in degrees.


function                                dMod(/////////////////////////////////////////////////////////////> Fix the modulus function (% is the remainder function in this language?)
                                        a                                                               //>
,                                       m                                                               //> The modulus.
){                                      //////////////////////////////////////////////////////////////////>
return ( a%m + m )%m;                                                                                   //>
}//dMod///////////////////////////////////////////////////////////////////////////////////////////////////>


function                                sDMS(/////////////////////////////////////////////////////////////> Convert number to text degrees-minutes-seconds. Used in LabelMgr.labelEquatorial
                                        a_dDecimalDegrees                                               //>
){                                      //////////////////////////////////////////////////////////////////>
  let                                   d                       = +a_dDecimalDegrees;                   //>
  let                                   dD                      = Math.floor(d);                        //> Get whole number of degrees.
  let                                   r_s                     = dD +"D";                              //> Start
  d = d - dD; d *= 60; dD = Math.floor(d); r_s += ( ""+(1000 +dD) ).slice(2  ) +"'";                    //>
  d = d - dD; d *= 60;                     r_s += ( ""+(1000 + d) ).slice(2,9) +'"';                    //>
return r_s;                                                                                             //>
}//sDMS///////////////////////////////////////////////////////////////////////////////////////////////////>


function                                dObliquity_360(///////////////////////////////////////////////////> https://github.com/jfcarr/practical-astronomy-javascript/blob/main/src/pa-macros.js
                                        a_jd                                                            //>
){                                      //////////////////////////////////////////////////////////////////>
 let                                    b              = a_jd - 2415020;                                //>
 let                                    c              = b/36525 - 1;                                   //>
 let                                    d              = c*(   46.815 + c*( 0.0006 - (c*0.00181) )   ); //>
 let                                    e              = d/3600;                                        //>
return 23.43929167 - e; // + nutatObl(greenwichDay, greenwichMonth, greenwichYear);                     //> Degrees tilt of Earth
}//dObliquity_360/////////////////////////////////////////////////////////////////////////////////////////>


// Equatorial |                           | dRaHDecToEclipticLong_360  | dRaHDecToAz_360
// RaH/Dec    |                           | dRaHDecToEclipticLat_360   | dRaHDecToAlt_360
//            |-----------------------------------------------------------------------------
// Ecliptic   | dEclipticLongLatToRa_360  |                            |
//            | dEclipticLongLatToDec_360 |                            |
//            |-----------------------------------------------------------------------------
// Az/Alt     |                           |                            |
//            |                           |                            |
//            |=============================================================================
//            | Equatorial RA/Dec         | Ecliptic Long/Lat          | Az/Alt


//. function                                dRaHDecToEclipticLong_360(///////////////////////////////> Convert Equatorial to Ecliptic Longitude.
//.                                         RaH                                                         //> RA    rah, ram, ras
//. ,                                       Dec                                                         //> Dec   dd, dm, ds
//. ,                                       a_jd                                                        //> when  gd, gm, gy
//. ){                                      //////////////////////////////////////////////////////////////>
//.  let                                    d_360   = dObliquity_360(a_jd);                             //>
//.  let                                    f       = 180./Math.PI*Math.atan2( SinD(RaH*15)*CosD(d_360) //>
//.                                                                           +TanD(Dec)*SinD(d_360)    //>
//.                                                                ,           CosD(RaH*15)             //>
//.                                                                );                                   //>
//. return f - 360.0*Math.floor(f / 360.0);                                                             //>
//. }//dRaHDecToEclipticLong_360//////////////////////////////////////////////////////////////////////////>
//. function                                dRaHDecToEclipticLat_360(/////////////////////////////////////> Convert Equatorial to Ecliptic Latitude.
//.                                         RaH                                                         //> Rise hours?
//. ,                                       Dec                                                         //> Degrees?
//. ,                                       a_jd                                                        //> Greenwich Date
//. ){                                      //////////////////////////////////////////////////////////////>
//.  let                                    d_360                   = dObliquity_360(a_jd);             //>
//. return 180/Math.PI*Math.asin(  SinD(Dec)*CosD(d_360)                                                //>
//.                              - CosD(Dec)*SinD(d_360)*SinD(RaH*15)                                   //>
//.                    );                                                                               //>
//. }//dRaHDecToEclipticLat_360///////////////////////////////////////////////////////////////////////////>


function                                dEclipticLongLatToRa_360(/////////////////////////////////////////> Convert Ecliptic coords to Equatorial Right Ascension
                                        Long                                                            //> long (degrees)
,                                       Lat                                                             //> lat (degrees)
,                                       a_jd                                                            //> when (julian day, for long-term obliquity drift)
){                                      //////////////////////////////////////////////////////////////////>
 let                                    d_360            = dObliquity_360(a_jd);                        //>
 let                                    f                = Math.atan2( SinD(Long )*CosD(d_360)          //>
                                                                      -TanD(Lat  )*SinD(d_360)          //>
                                                           ,           CosD(Long )                      //>
                                                           )*180./Math.PI;                              //>
return dMod(f ,360);                                                                                    //> Keep in range of 0 to 360.
}//dEclipticLongLatToRa_360///////////////////////////////////////////////////////////////////////////////>
function                                dEclipticLongLatToDec_360(////////////////////////////////////////> Convert Ecliptic coords to Equatorial Declination
                                        Long                                                            //> long (degrees)
,                                       Lat                                                             //> lat (degrees)
,                                       a_jd                                                            //> when (julian day)
){                                      //////////////////////////////////////////////////////////////////>
 let                                    d_360            = dObliquity_360(a_jd);                        //>
return                                                     Math.asin(  SinD(Lat)*CosD(d_360)            //>
                                                                     + CosD(Lat)*SinD(d_360)*SinD(Long) //>
                                                           )*180/Math.PI;                               //> Convert to degrees.
}//dEclipticLongLatToDec_360//////////////////////////////////////////////////////////////////////////////>


function                                dRaHDecToAz_360(//////////////////////////////////////////////////> Convert Equatorial Coordinates to Azimuth
                                        RaH                                                             //> Hour angle  OR azimuth  (degrees)
,                                       Dec                                                             //> Declination OR altitude (degrees)
,                                       G                                                               //> Geographic latitude     (degrees)
){                                      //////////////////////////////////////////////////////////////////>
  let                                   H                = Math.atan2(         -SinD(RaH)               //>
                                                           ,            SinD(G)*CosD(RaH)               //>
                                                                      - CosD(G)          *TanD(Dec)     //>
                                                           )*180./Math.PI;                              //>
return dMod( 180. + H ,360. );                                                                          //>
}//dRaHDecToAz_360////////////////////////////////////////////////////////////////////////////////////////>

function                                dRaHDecToAlt_360(/////////////////////////////////////////////////> Convert Equatorial Coordinates to Visible Altitude
                                        RaH                                                             //> hourAngleHours          , hourAngleMinutes      , hourAngleSeconds
,                                       Dec                                                             //> declinationDegrees      , declinationMinutes    , declinationSeconds
,                                       G                                                               //> Geographic latitude.
){                                      //////////////////////////////////////////////////////////////////>
return                                                     Math.asin(  SinD(Dec)*SinD(G)                //>
                                                                     + CosD(Dec)*CosD(G)*CosD(RaH)      //>
                                                           )*180./Math.PI;                              //>
}//dRaHDecToAlt_360///////////////////////////////////////////////////////////////////////////////////////>


function                                NAP(){ core.wait(0.01); }                                       //> Short pause. Delay to allow for asynchronous updates in Stellarium.


function                                Look(/////////////////////////////////////////////////////////////# Aim view at given point, with given zoom.
                                        a_Alt                                                           //>
,                                       a_Azi                                                           //>
,                                       a_Fov                                                           //> Feild of view
,                                       a_take                                                          //> Length of time to animate.
){                                      //////////////////////////////////////////////////////////////////>
  core.moveToAltAzi(      a_Alt, a_Azi ,a_take );                                                       //>
  StelMovementMgr.zoomTo( a_Fov        ,a_take );                                                       //>
  core.wait(                            a_take );                                                       //>
}//Look///////////////////////////////////////////////////////////////////////////////////////////////////>


function                                mapSelect(////////////////////////////////////////////////////////# Select a celestial object and report a map of info about it.
                                        a_sStarId                                                       //> Object e.g. "Moon"
){                                      //////////////////////////////////////////////////////////////////>
  core.selectObjectByName(a_sStarId ,false);                                                     NAP(); //>
  let                                   map                     = core.getSelectedObjectInfo();         //> https://stellarium.org/doc/0.15/classStelMainScriptAPI.html#a2dc0768e3a57abf27cddaebe0b52dc97
return map;                                                                                             //>
}//mapSelect//////////////////////////////////////////////////////////////////////////////////////////////>


 function                               dGmst_360(////////////////////////////////////////////////////////>
                                        dNow_jd                                                         //>
 ){                                     //////////////////////////////////////////////////////////////////>
  let                                   dNow_mjd                = dNow_jd - 2451544.;                   //> Convert to modern Julian Day.
  let                                   c                       = dNow_mjd/36525.0;                     //> julian centuries since J2000.0
 return 280.46061837                                                                                    //> Greenwich Mean Sidereal Time (GMST) in degrees
      + 360.98564736629*dNow_mjd                                                                        //>
      + (0.000387933 - c/38710000)*c*c                                                                  //>
  ;                                                                                                     //>
 }//dGmst_360/////////////////////////////////////////////////////////////////////////////////////////////>


function                                Mark(/////////////////////////////////////////////////////////////# Place a mark, or text, on the celestial sphere.
                                        a_sStarId                                                       //> Object e.g. "Moon"
,                                       a_sMarker                                                       //> Marker e.g. "cross"
,                                       a_sRgb                                                          //> color  e.g. "#ffffff"
,                                       a_dSize                                                         //> e.g. 12
,                                       dNow_jd
){                                      //////////////////////////////////////////////////////////////////>
  let                                   m                       = mapSelect(a_sStarId);          NAP(); //>
  if( dRaHDecToAlt_360( m.raJ2000 - dGmst_360(dNow_jd)                                                  //>
      ,                 m.decJ2000                                                                      //>
      ,                 g_dOBSERVERlAT                                                                  //>
      ) < 0                                                                                             //>
  ){                                                                                            return;}//> Convert Ra and Dec to Alt. Quit if below horizon.
                                                                                                        //>
  let                                   s                       = ""+ a_sMarker;                        //>
  switch( s ){                                                                                          //>
  case "cross" : case "circle": case "disk": case "circled-cross": case "gear":                         //> Type of marker - as expected.
  case "square":                                                                                        //> rounded unfilled square
  case "target":                                                                                        //> filled square
                        MarkerMgr.markerEquatorial(                                                     //>   https://stellarium.org/doc/24.0/classMarkerMgr.html#a86e2b962c9df54a77a7d568d931bfcbc
                                                    m.raJ2000   // ???  sDMS( m.raJ2000  )              //> const QString &         RA,
                        ,                           m.decJ2000  // ???  sDMS( m.decJ2000 )              //> const QString &         Dec,
//                                                  sDMS( m.ra       )                                  //> const QString &         RA,
//                      ,                           sDMS( m.dec      )                                  //> const QString &         Dec,
                        ,                           true                                                //> bool                    j2000epoch = true,
                        ,                           true                                                //> bool                    visible = true,
                        ,                           s                                                   //> const QString &         mtype = "cross",
                        ,                           a_sRgb                                              //> const QString &         color = "#ffff66",
                        ,                           a_dSize                                             //> const float             size = 6.f,
                                                                                                        //> bool                    autoDelete = false,
                                                                                                        //> int                     autoDeleteTimeoutMs = 0,
                                                                                                        //> bool                    withAberration = true
                        );                                                                              //> Returns a unique ID which can be used to refer to the marker. returns -1 if the marker could not be created (e.g. object not found)

//                      MarkerMgr.markerHorizon(                                                        //> Create a marker with horizontal coordinates.
//                                                                                                      //> const QString &         az
//                      ,                                                                               //> const QString &         alt
//                      ,                                                                               //> bool                    visible                 = true
//                      ,                                                                               //> const QString &         mtype                   = "cross"
//                      ,                                                                               //> const QString &         color                   = "#ffff66"
//                      ,                                                                               //> const float             size                    = 6.f
//                      ,                                                                               //> bool                    autoDelete              = false
//                      ,                                                                               //> int                     autoDeleteTimeoutMs     = 0
//                      );
  break;default:
       LabelMgr.labelEquatorial(                                                                        //> https://stellarium.org/doc/head/classLabelMgr.html#aa3db5e65c8f240b265565b996df7bbf3
                                                    '           '+s                                     //> text                the text to display
                        ,                           sDMS( m.raJ2000  )                                  //> RA                  right ascension (e.g. 5h10m31s)
                        ,                           sDMS( m.decJ2000 )                                  //> Dec                 declination (e.g. 25d30m30s)
                        ,                           true                                                //> visible             if true, the label starts displayed, else it starts hidden
                        ,                           a_dSize                                             //> fontSize            size of the font to use
                        ,                           a_sRgb                                              //> fontColor           either HTML-like color spec, e.g. "#ffff00", or 3-part float vector like Vec3f(1.0f,1.0f,0.0f) for yellow
                        ,                           ""                                                  //> side                where the label appears in relation to coordinates: "N" = above object on screen,"S","E","W","NE", "NW", "SE", "SW"
                        ,                           0                                                   //> labelDistance
                        ,                           false                                               //> autoDelete          the label will be automatically deleted after it is displayed once
                        ,                           0                                                   //> autoDeleteTimeoutMs if not zero, the label will be automatically deleted after autoDeleteTimeoutMs ms
                        ,                           true                                                //> j2000epoch          if true, the label starts displayed in equatorial coordinates for epoch J2000.0
                        );                                                                              //>
  }//switch                                                                                             //>
}//Mark///////////////////////////////////////////////////////////////////////////////////////////////////>


 function                               Twinkle(//////////////////////////////////////////////////////////> Create animation frames.
                                        a_i                                                             //> Incrementing number.
 ,                                      a_sStarId                                                       //> Object e.g. "Moon"
 ,                                      a_sRgb                                                          //>
 ,                                      a_dSize                                                         //>
 ,                                      dNow_jd                                                         //>
 ){                                     //////////////////////////////////////////////////////////////////>
  let                                   n                       = 0;                                    //>
  for( let i = 0; i < 7; i++ ){   n += nHash( a_sStarId + (a_i+i) ) & 24;   }                           //>
  if( 94 < n ){   Mark(a_sStarId ,"circle" ,a_sRgb ,2           ,dNow_jd);   }                          //>
  else        {   Mark(a_sStarId ,"circle" ,a_sRgb ,a_dSize     ,dNow_jd);   }                          //>
 }//Twinkle///////////////////////////////////////////////////////////////////////////////////////////////>


function                                Reset(////////////////////////////////////////////////////////////> Set up our own default "reset" state:
){                                      //////////////////////////////////////////////////////////////////>
  core                  .clear("natural");                                                              //> Clear the display options. natural: azimuthal mount, atmosphere, landscape, no lines, labels or markers.   "starchart"   https://stellarium.org/doc/23.0/classStelMainScriptAPI.html
  core                  .setProjectionMode(                                                             //> https://stellarium.org/doc/23.0/classStelMainScriptAPI.html
                                           "ProjectionStereographic"                                    //>
                                        // "ProjectionPerspective"                                      //> Perspective projection - did not work as well.
                                        // "ProjectionEqualArea"                                        //>
                                        // "ProjectionFisheye"                                          //>
                                        // "ProjectionHammer"                                           //>
                                        // "ProjectionCylinder"                                         //>
                                        // "ProjectionMercator"                                         //>
                                        // "ProjectionOrthographic"                                     //>
                                        // "ProjectionSinusoidal"                                       //>
                                        // "ProjectionMiller"                                           //>
                        );                                                                              //>
  core                  .setTimeRate(                           0   );                                  //> Paused.
  core                  .setTimezone(                    "UTC-00:00");                                  //>   https://stellarium.org/doc/23.0/classStelMainScriptAPI.html
  ConstellationMgr      .setArtIntensity(                       0.6 );                                  //>
  ConstellationMgr      .setFlagArt(                           true );                                  //>   https://stellarium.org/doc/23.0/classConstellationMgr.html
  ConstellationMgr      .setArtFadeDuration(                    0.0 );                                  //>
  ConstellationMgr      .setFlagBoundaries(                   false );                                  //> Constellation boundaries lines will not be displayed.
  ConstellationMgr      .setFlagIsolateSelected(               true );                                  //> Selected constellation displayed alone.
  ConstellationMgr      .setFlagLabels(                       false );                                  //> Constellation names will not be displayed.
  ConstellationMgr      .setFlagLines(                         true );                                  //> Constellation lines.
  ConstellationMgr      .deselectConstellations(                    );                                  //> !!!NOT RELIABLE!
  GridLinesMgr          .setFlagAzimuthalGrid(                false );                                  //> Shows or hides the grid for the horizontal coordinate system.   https://stellarium.org/doc/23.0/classGridLinesMgr.html
  GridLinesMgr          .setFlagEclipticJ2000Grid(            false );                                  //> Display Ecliptic Grid of J2000.0.
  GridLinesMgr          .setFlagEclipticGrid(                 false );                                  //> Display Ecliptic Grid of Date.
  GridLinesMgr          .setFlagEclipticLine(                 false );                                  //> ???
  GridLinesMgr          .setFlagEquatorGrid(                  false );                                  //> Centered on north pole.
  GridLinesMgr          .setFlagEquatorJ2000Grid(             false );                                  //> Display Equatorial J2000 Grid.
  GridLinesMgr          .setFlagFixedEquatorGrid(             false );                                  //> Display the Fixed Equatorial Grid (Hour angle/declination).
  GridLinesMgr          .setFlagGalacticGrid(                 false );                                  //> Display Galactic Grid.
  GridLinesMgr          .setFlagMeridianLine(                 false );                                  //> North-south line?
  GridLinesMgr          .setFlagSupergalacticGrid(            false );                                  //> Display Supergalactic Grid.
  LabelMgr              .deleteAllLabels(                           );                                  //> Delete text boxes. LabelMgr.labelScreen - adds text to the scene.   https://stellarium.org/doc/0.20/classLabelMgr.html
  LandscapeMgr          .setFlagAtmosphere(                    true );                                  //> https://stellarium.org/doc/23.0/classLandscapeMgr.html
  LandscapeMgr          .setFlagCardinalPoints(                true );                                  //>
  LandscapeMgr          .setFlagFog(                          false );                                  //>
  LandscapeMgr          .setFlagLandscape(                     true );                                  //> Turn on Landscape,
  LandscapeMgr          .setFlagLandscapeUseTransparency(      true );                                  //> Determine if a transparency should be used.
  LandscapeMgr          .setLandscapeTransparency(              0.2 );                                  //> Value of transparency, 1 = fully transparent
  MarkerMgr             .deleteAllMarkers(                          );                                  //> https://stellarium.org/doc/23.0/classMarkerMgr.html
  SolarSystem           .setFlagMoonScale(                    false );                                  //> Determines if Earth's moon is scaled or not.
  SolarSystem           .setMoonScale(                           1  );                                  //> Set the display scaling factor for Earth's moon.
  SolarSystem           .setFlagDrawMoonHalo(                  true );                                  //> Glare around moon.
  SporadicMeteorMgr     .setFlagShow(                         false );                                  //> No meteors.   https://stellarium.org/doc/23.0/classSporadicMeteorMgr.html
  StelSkyDrawer         .setFlagTwinkle(                      false );                                  //> No star twinkle.   https://stellarium.org/doc/23.0/classStelSkyDrawer.html
  StelSkyDrawer         .setFlagLuminanceAdaptation(          false );                                  //> Set the value of the eye adaptation flag.
}//Reset//////////////////////////////////////////////////////////////////////////////////////////////////>


 function                               ShowConstellations(///////////////////////////////////////////////> Show lines for constellations of interest.
 ){                                     //////////////////////////////////////////////////////////////////>
  ConstellationMgr.deselectConstellations();                                                            //>
  ConstellationMgr.setFlagLines(     true );                                                            //> Constellation lines.
  mapSelect("Alhena"   ); // Gemini                                                                     //> Select stars to turn on constellation lines:
  mapSelect("Procyon"  ); // Canis Minor                                                                //>
  mapSelect("Aldebaran"); // Taurus                                                                     //>
//mapSelect("Capella"  ); //                                                                            //>
  mapSelect("Alnitak"  ); // Orion                                                                      //>
  mapSelect("Hamal"    ); // Aries                                                                      //>
  mapSelect("Alpherg"  ); // Pisces                                                                     //>
  mapSelect("Mirfak"   ); // Perseus                                                                    //>
  mapSelect("Menkar"   ); // Cetus                                                                      //>
  mapSelect("Zaurak"   ); // Eri                                                                        //>
  mapSelect("HR 2298"  ); // Mono                                                                       //>
  mapSelect("Almach"   ); //                                                                            //>
  mapSelect("Navi"     ); // Cassiopia                                                                  //>
  mapSelect("Arneb"    ); //                                                                            //>
  mapSelect("Acubens"  ); // Scorpio                                                                    //>
  mapSelect("Regulus"  ); // Leo                                                                        //>
 }//ShowConstellations////////////////////////////////////////////////////////////////////////////////////>


 function                               Snap(/////////////////////////////////////////////////////////////> Take a screen shot.
                                        a_sFile                                                         //> Text description of center of screen shot.
 ){                                     //////////////////////////////////////////////////////////////////>
  core.screenshot(a_sFile ,false ,g_sPATHsHOTS ,true ,'png');                                           //>
 }//Snap//////////////////////////////////////////////////////////////////////////////////////////////////>


 function                               Go_NebraScreenSnaps_View(/////////////////////////////////////////>
                                        sView                                                           //>
 ){                                     //////////////////////////////////////////////////////////////////>
  const                                 cosE                    = CosD( 23. + 27./60. );                //> Convert ecliptic coords to equatorial.
  const                                 sinE                    = SinD( 23. + 27./60. );                //> tanL = ( sinAcosE + TanDsinE )/cosA       https://en.wikipedia.org/wiki/Astronomical_coordinate_systems#Equatorial_.E2.86.90.E2.86.92_ecliptic
                                                                                                        //>
  let                                   sinL                    = 0;                                    //> sinB = SinDcosE  - CosDsinEsinA
  let                                   cosL                    = 0;                                    //> A = Right Ascention
                                                                                                        //>
  MarkerMgr       .deleteAllMarkers();                                                                  //> https://stellarium.org/doc/23.0/classMarkerMgr.html
  StelSkyDrawer   .setCustomStarMagnitudeLimit( 5. );                                                   //> Turn off dim stars.
  ConstellationMgr.setFlagArt(false); ConstellationMgr.setFlagLines(false);                             //>
                                                                core.wait(2); Snap('scr_stars_'+sView); //>   https://stellarium.org/doc/23.0/classConstellationMgr.html
  StelSkyDrawer   .setCustomStarMagnitudeLimit( -99. );                                                 //> Turn off stars.
  ShowConstellations();                                                                                 //> Show lines for constellations of interest.
  core.setSelectedObjectInfo('None');                           core.wait(2); Snap('scr_lines_'+sView); //> Turn off display of info. Take a screen snapshot.
  ConstellationMgr.setFlagArt(false); ConstellationMgr.setFlagLines(false);                             //>
  for( let i = 0; i < g_a2vDOTS.length; i++ ){                                                          //>
   let                                av                      = g_a2vDOTS[i];                           //>
   if(  ""  != av[g_iDOTS_sId] ){                                                                       //>
    if(       "p" ==av[g_iDOTS_sView]                                                                   //>
           || "P" ==av[g_iDOTS_sView] ){ Mark( av[g_iDOTS_sId ] ,"circle" ,"#00FFFF" ,12 );             //. Mark( av[g_iDOTS_sId ] ,""+(i+1) ,"#00FFFF" ,30 ); //> Blue circle (and number).
    }else if( "g" ==av[g_iDOTS_sView] ){ Mark( av[g_iDOTS_sId ] ,"circle" ,"#00FF00" , 6 );             //. Mark( av[g_iDOTS_sId ] ,""+(i+1) ,"#00FF00" ,15 ); //> Green circle (and number).
    }else                              { Mark( av[g_iDOTS_sId ] ,"circle" ,"#FF0000" ,12 );             //. Mark( av[g_iDOTS_sId ] ,""+(i+1) ,"#FF0000" ,30 ); //> Otherwise a red circle (and number).
  }}}//if//if//for i                                                                                    //>
                                                                core.wait(2); Snap('scr_dots_'+ sView); //>
  MarkerMgr      .deleteAllMarkers();                                                                   //> https://stellarium.org/doc/23.0/classMarkerMgr.html
  ConstellationMgr.setFlagArt(true ); ConstellationMgr.setArtIntensity( 1 );
                                                                core.wait(2); Snap('scr_art_'+  sView); //>
                                                                                                        //>
  ConstellationMgr.setFlagArt(false); ConstellationMgr.setArtIntensity( 0 );                            //>
  for( iPass = -1; iPass <= 1; iPass++ ){                                                               //> D = Declination
   let                                  B                       = iPass*(5 + 9/60);                     //> E = obliquity of the ecliptic (about 23.4°) // 23 + 27/60.;    Moon's orbital inclination: 5 +  9/60 Moon's ecliptic.
   let                                  cosB                    = CosD( B );                            //> B = ecliptic latitude, L = ecliptic longitude
   let                                  sinB                    = SinD( B );                            //> D = declination      , A = Right Ascention
   let                                  tanB                    = TanD( B );                            //>
   for( L = 0; L < 360; L++ ){                                                                          //> Draw circle of?
    sinL = SinD( L );   cosL = CosD( L );                                                               //>
    A = Math.atan2(   sinL*cosE - tanB*sinE   ,cosL   )*180/Math.PI;                                    //>
    D = Math.asin(    sinB*cosE + cosB*sinE*sinL      )*180/Math.PI;                                    //>
    MarkerMgr.markerEquatorial( A ,D ,true,true ,"disk" ,"#ffff00" ,2);       //core.wait(0.01);        //>
  }}//for L//for iPass                                                                                  //>
                                                                 core.wait(2); Snap('scr_path_'+sView); //> Take and save a screen shot.
 }//Go_NebraScreenSnaps_View//////////////////////////////////////////////////////////////////////////////>


 function                               Go_NebraAlignments(///////////////////////////////////////////////> Create screen snapshots for the two main views of the Nebra Sky Disc.
 ){                                     //////////////////////////////////////////////////////////////////>
  Reset();                                                                                              //> Clear Stellarium to known state.
  ConstellationMgr.setFlagArt(                  false );                                                //> No constellation images.   https://stellarium.org/doc/23.0/classConstellationMgr.html
  ConstellationMgr.setFlagLines(                 true );                                                //> Constellation lines on.
  LandscapeMgr    .setFlagAtmosphere(           false );                                                //> No atmosphere effects.   https://stellarium.org/doc/23.0/classLandscapeMgr.html
  SolarSystem     .setFlagPlanets (             false );                                                //> Don't show planets (or Moon?)
  StelSkyDrawer   .setAbsoluteStarScale(          2.0 );                                                //> Set the absolute star brightness scale.
  StelSkyDrawer   .setFlagDrawBigStarHalo(      false );                                                //> Set flag for drawing a halo around bright stars.
  StelSkyDrawer   .setFlagStarMagnitudeLimit(    true );                                                //> Toggle the application of user-defined star magnitude limit.
  StelSkyDrawer   .setCustomStarMagnitudeLimit(   5.0 );                                                //> Sets a lower limit for star magnitudes (anything fainter (greater) is ignored).
  StelSkyDrawer   .setFlagLuminanceAdaptation(  false );                                                //> Set the value of the eye adaptation flag.
  NebulaMgr       .setFlagShow(                 false );                                                //>
  MilkyWay        .setFlagShow(                 false );                                                //> Don't show Milky Way.   https://stellarium.org/doc/24.0/classMilkyWay.html#ac365cf02f2019b6485337a6c48cec5cb   core.setMilkyWayVisible( false );                                                                     //>
  Look( 90 - g_dOBSERVERlAT + 23.43602467002239   ,180 ,100 ,3 );                                       //> Look South, up to ecliptic.
  Go_NebraScreenSnaps_View("south"   );                                                                 //>
                                                                                                        //>
  let                                   map                     = mapSelect("HR 1165");                 //> Alcyone - Brightest of 7 sisters.
  Look( map["altitude"] ,map["azimuth"]   ,100 ,3 );                                                    //> Look at Seven Sisters, sky view, slow.
  Go_NebraScreenSnaps_View("pleiades");                                                                 //>
 }//Go_NebraAlignments////////////////////////////////////////////////////////////////////////////////////>


 function                               nHash(////////////////////////////////////////////////////////////>
                                        str                                                             //>
 ){                                     //////////////////////////////////////////////////////////////////>
  let                                   r_n                     = 0;                                    //>
  for( let i = 0; i < str.length; i++ ){                                                                //>
   let                                  chr                     = str.charCodeAt(i);                    //>
   r_n = (r_n << 5) - r_n + chr;                                                                        //>
   r_n |= 0;                                                                                            //> Convert to 32bit integer.
  }//for i                                                                                              //>
 return r_n;                                                                                            //>
 }//nHash/////////////////////////////////////////////////////////////////////////////////////////////////>


 function                               Go_Frames_Setup(//////////////////////////////////////////////////> Create animation frames.
 ){                                     //////////////////////////////////////////////////////////////////>
  core             .clear(                                              "natural");                     //> Clear the display options. natural: azimuthal mount, atmosphere, landscape, no lines, labels or markers.   "starchart"   https://stellarium.org/doc/23.0/classStelMainScriptAPI.html
  core             .setProjectionMode(                  "ProjectionStereographic");                     //> https://stellarium.org/doc/23.0/classStelMainScriptAPI.html
  core             .setTimeRate(                                               0 );                     //> Paused.
  core             .setTimezone(                                      "UTC-00:00");                     //>   https://stellarium.org/doc/23.0/classStelMainScriptAPI.html
  GridLinesMgr     .setFlagAzimuthalGrid(                                  false );                     //> Shows or hides the grid for the horizontal coordinate system.   https://stellarium.org/doc/23.0/classGridLinesMgr.html
  GridLinesMgr     .setFlagEclipticJ2000Grid(                              false );                     //> Display Ecliptic Grid of J2000.0.
  GridLinesMgr     .setFlagEclipticGrid(                                   false );                     //> Display Ecliptic Grid of Date.
  GridLinesMgr     .setFlagEclipticLine(                                   false );                     //> ???
  GridLinesMgr     .setFlagEquatorGrid(                                    false );                     //> Centered on north pole.
  GridLinesMgr     .setFlagEquatorJ2000Grid(                               false );                     //> Display Equatorial J2000 Grid.
  GridLinesMgr     .setFlagFixedEquatorGrid(                               false );                     //> Display the Fixed Equatorial Grid (Hour angle/declination).
  GridLinesMgr     .setFlagGalacticGrid(                                   false );                     //> Display Galactic Grid.
  GridLinesMgr     .setFlagMeridianLine(                                   false );                     //> North-south line?
  GridLinesMgr     .setFlagSupergalacticGrid(                              false );                     //> Display Supergalactic Grid.
  SporadicMeteorMgr.setFlagShow(                                           false );                     //> No meteors.   https://stellarium.org/doc/23.0/classSporadicMeteorMgr.html
  NebulaMgr        .setFlagShow(                                           false );                     //>
  StelSkyDrawer    .setFlagTwinkle(                                        false );                     //> No star twinkle.   https://stellarium.org/doc/23.0/classStelSkyDrawer.html
  StelSkyDrawer    .setFlagLuminanceAdaptation(                            false );                     //> Set the value of the eye adaptation flag.
  StelSkyDrawer    .setFlagDrawBigStarHalo(                                false );                     //> Set flag for drawing a halo around bright stars.
//MilkyWay         .setFlagShow(                                           false );                     //> Show Milky Way.   https://stellarium.org/doc/24.0/classMilkyWay.html#ac365cf02f2019b6485337a6c48cec5cb   core.setMilkyWayVisible( false );                                                                     //>
  MilkyWay         .setFlagShow(                                            true );                     //> Show Milky Way.   https://stellarium.org/doc/24.0/classMilkyWay.html#ac365cf02f2019b6485337a6c48cec5cb   core.setMilkyWayVisible( false );                                                                     //>
  LandscapeMgr     .setFlagAtmosphere(                                      true );                     //> No atmosphere effects.   https://stellarium.org/doc/23.0/classLandscapeMgr.html
  LandscapeMgr     .setFlagCardinalPoints(                                  true );                     //>
  LandscapeMgr     .setFlagFog(                                            false );                     //>
  LandscapeMgr     .setFlagLandscape(                                       true );                     //> Turn on Landscape,
  LandscapeMgr     .setFlagLandscapeUseTransparency(                        true );                     //> Determine if a transparency should be used.
  LandscapeMgr     .setLandscapeTransparency(                                0.0 );                     //> Value of transparency, 1 = fully transparent
  LandscapeMgr     .setCurrentLandscapeName(                  "Stonehenge7" ,0.0 );                     //>
  LabelMgr         .deleteAllLabels(                                             );                     //> Delete text boxes. LabelMgr.labelScreen - adds text to the scene.   https://stellarium.org/doc/0.20/classLabelMgr.html
//SolarSystem      .setFlagMoonScale(                                      false );                     //> Determines if Earth's moon is scaled or not.
//SolarSystem      .setMoonScale(                                             1  );                     //> Set the display scaling factor for Earth's moon.
//SolarSystem      .setFlagDrawMoonHalo(                                    true );                     //> Glare around moon.
  SolarSystem      .setFlagPlanets(                                        false );                     //>
  SolarSystem      .setFlagPlanets(                                         true );                     //>
//SolarSystem      .setFlagPlanetScale(                                     true );                     //>
//SolarSystem      .setPlanetScale(                                          10.0);                     //> Set the display scaling factor for planets. Not working.
  SolarSystem      .setFlagMoonScale(                                        true);                     //> Determines if Earth's moon is scaled or not.
  SolarSystem      .setMoonScale(                                             8.0);                     //> Set the display scaling factor for Earth's moon.
  SolarSystem      .setFlagDrawMoonHalo(                                    false);                     //> Glare around moon.
//Planet           .setSphereScale(                                           0.1);                     //>
//Look( 90 ,185  ,110 ,0 );                                                           core.wait( 0.1 ); //> Look up, South, wide angle.
  ConstellationMgr .setArtIntensity(                                         0.6 );                     //>
  ConstellationMgr .setFlagArt(                                            false );                     //>   https://stellarium.org/doc/23.0/classConstellationMgr.html
  ConstellationMgr .setArtFadeDuration(                                      0.1 );                     //>
  ConstellationMgr .setFlagBoundaries(                                     false );                     //> Constellation boundaries lines will not be displayed.
  ConstellationMgr .setFlagIsolateSelected(                                 true );                     //> Selected constellation displayed alone.
  ConstellationMgr .setFlagLabels(                                         false );                     //> Constellation names will not be displayed.
  ConstellationMgr .setFlagLines(                                           true );                     //> Constellation lines.
  ConstellationMgr .deselectConstellations(                                      );                     //> !!!NOT RELIABLE!
//ConstellationMgr .deselectConstellations();                                                           //> Clear constellations
//ConstellationMgr .setFlagArt(false);                                                                  //>
//ConstellationMgr .setFlagIsolateSelected(false);                                                      //> turn off constellation
//ConstellationMgr .setFlagLines(false);                                                                //>
//ConstellationMgr .setArtIntensity(                                         0.6 );                     //>
  ConstellationMgr .setFlagArt(                                            false );                     //>   https://stellarium.org/doc/23.0/classConstellationMgr.html
  ConstellationMgr .setArtFadeDuration(                                      0.1 );                     //>
  ConstellationMgr .setFlagBoundaries(                                     false );                     //> Constellation boundaries lines will not be displayed.
  ConstellationMgr .setFlagIsolateSelected(                                 true );                     //> Selected constellation displayed alone.
  ConstellationMgr .setFlagLabels(                                         false );                     //> Constellation names will not be displayed.
  ConstellationMgr .setFlagLines(                                           true );                     //> Constellation lines.
  ConstellationMgr .deselectConstellations(                                      );                     //> !!!NOT RELIABLE!
//core.setGuiVisible( false );
//LabelMgr.deleteAllLabels(); LabelMgr.labelScreen( 10 + mapSun["altitude"] ,400 ,200 ,true ,20 ,"#ff0000"); //> DEBUG
  MarkerMgr        .deleteAllMarkers(                                            );                     //> https://stellarium.org/doc/23.0/classMarkerMgr.html
//StelSkyLayerMgr.setFlagShow( true ); //                                                  size  rotate
//core.removeSkyImage("imgDisc1"); core.loadSkyImage("imgDisc1","disc_11.png",98.   ,27.,  2250.0,316.0,2.5,-14,true,"EqJ2000"); //> pinned to celestial sphere.   Distortion bug.
//core.removeSkyImage("imgDisc2"); core.loadSkyImage("imgDisc2","disc_11.png",48.   ,27.,2*2250.0,  0  ,2.5,-14,true,"EqJ2000"); //> pinned to celestial sphere.   Distortion bug.
//core.removeSkyImage("imgDisc3"); core.loadSkyImage("imgDisc3","disc_11.png",48.+60,27.,2*2250.0,  0  ,2.5,-14,true,"EqJ2000"); //> pinned to celestial sphere.   Distortion bug.
//core.removeSkyImage("imgDisc4"); core.loadSkyImage("imgDisc4","disc_11.png",48.+70,27.,2*2250.0,  0  ,2.5,-14,true,"EqJ2000"); //> pinned to celestial sphere.   Distortion bug.
 }//Go_Frames_Setup///////////////////////////////////////////////////////////////////////////////////////>


 function                               MarkMajorStars(///////////////////////////////////////////////////>
                                        iFrame
 ,                                      dNow_jd
 ){                                     //////////////////////////////////////////////////////////////////>
  Twinkle( iFrame ,"Vega"      ,"#ffff00" ,6 ,dNow_jd );  //> Lyra
  Twinkle( iFrame ,"Dubhe"     ,"#ffff00" ,4 ,dNow_jd );  //> Mark("Dubhe"  ,"disk" ,"#ffff00" ,3); //> Big Dipper
  Twinkle( iFrame ,"Merak"     ,"#ffff00" ,4 ,dNow_jd );  //> Mark("Merak"  ,"disk" ,"#ffff00" ,3); //> Big Dipper
  Twinkle( iFrame ,"Phecda"    ,"#ffff00" ,4 ,dNow_jd );  //> Mark("Phecda" ,"disk" ,"#ffff00" ,3); //> Big Dipper
  Twinkle( iFrame ,"Megrez"    ,"#ffff00" ,4 ,dNow_jd );  //> Mark("Megrez" ,"disk" ,"#ffff00" ,3); //> Big Dipper
  Twinkle( iFrame ,"Alioth"    ,"#ffff00" ,4 ,dNow_jd );  //> Mark("Alioth" ,"disk" ,"#ffff00" ,3); //> Big Dipper
  Twinkle( iFrame ,"Mizar"     ,"#ffff00" ,4 ,dNow_jd );  //> Mark("Mizar"  ,"disk" ,"#ffff00" ,3); //> Big Dipper
  Twinkle( iFrame ,"Alkaid"    ,"#ffff00" ,4 ,dNow_jd );  //> Mark("Alkaid" ,"disk" ,"#ffff00" ,3); //> Big Dipper
  Twinkle( iFrame ,"Polaris"   ,"#ffff00" ,4 ,dNow_jd );  //> North Pole
//Twinkle( iFrame ,"HIP 27913" ,"#00ff00" ,4 ,dNow_jd );  //> Highlight stars from Nebra Sky Disc
//Twinkle( iFrame ,"HIP 30665" ,"#00ff00" ,4 ,dNow_jd );  //> "
  Twinkle( iFrame ,"HIP 36850" ,"#00ff00" ,4 ,dNow_jd );  //> ,[3  ,70.83071 ,28.24098 ,""                   ,"HR 2891" , "g" ,"Gem" ,"Castor"           ,"HIP 36850" ,10.09375094 ,110.2445114 ,31.88560856 ,113.65401298 ,1.90] //> 2  HR 2891   36850   α Gem   Gem     From its ancient Greek name Κάστωρ, a character in Greek mythology, the twin of Pollux (β Gem). Reapplied in Renaissance times. Greek   Kunitzsch, Paul; Smart, Tim (2006). A Dictionary of Modern star Names: A Short Guide to 254 Star Names and Their Derivations (2nd rev. ed.). Cambridge, Massachusetts: Sky Pub.
  Twinkle( iFrame ,"HIP 36962" ,"#00ff00" ,4 ,dNow_jd );  //> ,[5  ,57.53873 ,40.46251 ,""                   ,"HR 2905" , "g" ,"Gem" ,"υ Gem"            ,"HIP 36962" ,5.214980108 ,111.3497335 ,26.89384299 ,113.98638207 ,4.05] //> 4
  Twinkle( iFrame ,"HIP 34693" ,"#00ff00" ,4 ,dNow_jd );  //> ,[6  ,-999     ,-999     ,""                   ,"HR 2697" , "g" ,"Gem" ,"τ Gem"            ,"HIP 34693" ,7.753792736 ,105.4497733 ,30.24383889 ,107.79100553 ,4.40]
  Twinkle( iFrame ,"HIP 33018" ,"#00ff00" ,4 ,dNow_jd );  //> ,[7  ,-999     ,-999     ,""                   ,"HR 2540" , "g" ,"Gem" ,"θ Gem"            ,"HIP 33018" ,11.02960860 ,101.1293019 ,33.96015699 ,103.20412524 ,3.59] //> 8
  Twinkle( iFrame ,"HIP 35550" ,"#00ff00" ,4 ,dNow_jd );  //> ,[15 ,53.85233 ,64.36998 ,""                   ,"HR 2777" , "g" ,"Gem" ,"Wasat"            ,"HIP 35550" ,-0.17844208 ,108.5246902 ,21.98152794 ,110.03649036 ,3.5 ] //> 16 HR 2777  35550   δ Gem   Gem     From the Arabic word wasat, "middle," used by a sci-A commentator who was speculating on the meaning of the ind-A constellation name al-jauza'. Reference was made to al-jauza's being in the "middle" (wasat) of the sky (perhaps meaning the celestial equator). The reference was intended to apply to the ind-A figure located in today's Orion, however it was under the constellation which is today Gemini that the reference appeared (note the confusion between Orion and Gemini mentioned under α Ori). Therefore, after  transliteration into Latin, it was in Gemini (to δ) that the word "Wasat" was arbitrarily applied as a star name in recent times.  Arabic
//Twinkle  iFrame ,                          ,dNow_jd     //> ,[17 ,38.3646  ,81.51411 ,""                   ,""        ,""                                                                                                     ] //> 18
  Twinkle( iFrame ,"HIP 33715" ,"#00ff00" ,4 ,dNow_jd );  //> ,[20 ,50.30947 ,98.89025 ,""                   ,"HR 2615" , "g" ,"Gem" ,"41 Gem"           ,"HIP 33715" ,-6.60175956 ,104.5677183 ,16.07857180 ,105.07171491 ,5.70] //> 21
  Twinkle( iFrame ,"HIP 32362" ,"#00ff00" ,4 ,dNow_jd );  //> ,[22 ,47.5255  ,118.5022 ,""                   ,"HR 2484" , "g" ,"Gem" ,"Alzirr"           ,"HIP 32362" ,-10.1055159 ,101.2142292 ,12.89389186 ,101.32730563 ,3.34] //> 23 HR 2484  32362   ξ Gem   Gem
  Twinkle( iFrame ,"HIP 31681" ,"#00ff00" ,4 ,dNow_jd );  //> ,[23 ,-999     ,-999     ,"Alhena"             ,"HR 2421" , "g" ,"Gem" ,"Alhena"           ,"HIP 31681" ,-6.74285099 ,99.11047785 ,16.39856993 ,99.433987651 ,1.90] //> 25  HR 2421 31681   γ Gem   Gem     Applied in recent times from the ind-A lunar mansion name al-bana, possibly meaning "the Mark on the Neck of a Camel," for γ and ξ Gem, or alternatively for γ, ξ, η, μ, and v Gem.     Arabic  Kunitzsch, Paul; Smart, Tim (2006). A Dictionary of Modern star Names: A Short Guide to 254 Star Names and Their Derivations (2nd rev. ed.). Cambridge, Massachusetts: Sky Pub.
  Twinkle( iFrame ,"HIP 25428" ,"#00ff00" ,4 ,dNow_jd );  //> ,[27 ,-999     ,-999     ,"Elnath"             ,"HR 1791" , "g" ,"Tau" ,"Elnath"           ,"HIP 25428" ,5.383700043 ,82.58064369 ,28.60636790 ,81.579526761 ,1.65] //> 31 HR 1791  25428   β Tau   Tau
  Twinkle( iFrame ,"HIP 29038" ,"#00ff00" ,4 ,dNow_jd );  //> ,[29 ,-999     ,-999     ,""                   ,"HR 2159" , "g" ,"Ori" ,"ν Ori"            ,"HIP 29038" ,-8.65875821 ,91.85748091 ,14.76827729 ,91.899060953 ,4.40] //> 35
  Twinkle( iFrame ,"HIP 26451" ,"#00ff00" ,4 ,dNow_jd );  //> ,[31 ,123.8151 ,145.3032 ,"Tianguan"           ,"HR 1910" , "g" ,"Tau" ,"Tianguan"         ,"HIP 26451" ,-2.19574353 ,84.79039795 ,21.14263598 ,84.417365391 ,2.95] //> 38 HR 1910  26451   ζ Tau   Tau     Chinese single star asterism, a celestial pass along the ecliptic which opens and closes        Chinese Rufus+Tien (1945) on the Suzhou Map, Sun and Kistemaker (1997) evaluating Han sources, Sun Shuwei (2022) on the Su Song Map
  Twinkle( iFrame ,"HIP 23835" ,"#00cccc" ,4 ,dNow_jd );  //> [[1  ,108.1498 ,18.1577  ,""                   ,"HR 1656" ,"p"  ,"Tau" ,"m Tau"            ,"HIP 23835" ,-4.22757736 ,77.53867299 ,18.64563797 ,76.872793943 ,4.90] //> 0  m Tau
  Twinkle( iFrame ,"HIP 22697" ,"#00cccc" ,4 ,dNow_jd );  //> ,[2  ,126.3757 ,25.09133 ,""                   ,"HR 1554" ,"p"  ,"Tau" ,"HIP 22697"        ,"HIP 22697" ,5.321147746 ,75.13733004 ,27.89789880 ,73.202952944 ,5.95] //> 1
  Twinkle( iFrame ,"HIP 21421" ,"#00cccc" ,4 ,dNow_jd );  //> ,[4  ,96.88832 ,31.32991 ,"Aldebaran"          ,"HR 1457" ,"p"  ,"Tau" ,"Aldebaran"        ,"HIP 21421" ,-5.46902602 ,69.79493535 ,16.50842997 ,68.986323401 ,0.85] //> 3  HR 1457   21421   α Tau   Tau     Applied in medieval times from its ind-A name al-dabaran, possibly meaning "the Follower," alternatively used as the lunar mansion name for all the Hyades (or again for α Tau alone). The name is thought to refer to this star's following the Pleiades across the sky, or to the Hyades (or α Tau) coming after the Pleiades as a lunar mansion. "Aldebaran" is one of the oldest Arabic star names applied in the West, from the end of the 10th century A.D.       Arabic  Kunitzsch, Paul; Smart, Tim (2006). A Dictionary of Modern star Names: A Short Guide to 254 Star Names and Their Derivations (2nd rev. ed.). Cambridge, Massachusetts: Sky Pub.
  Twinkle( iFrame ,"HIP 18724" ,"#00cccc" ,4 ,dNow_jd );  //> ,[6  ,83.44666 ,46.62984 ,""                   ,"HR 1239" ,"p"  ,"Tau" ,"λ Tau"            ,"HIP 18724" ,-7.96025099 ,60.63957058 ,12.49090067 ,60.175190376 ,3.40] //> 5
  Twinkle( iFrame ,"HIP 19038" ,"#00cccc" ,4 ,dNow_jd );  //> ,[7  ,112.1699 ,46.02002 ,""                   ,"HR 1256" ,"p"  ,"Tau" ,"A1 Tau"           ,"HIP 19038" ,1.259198008 ,63.46112813 ,22.08241414 ,61.180044518 ,4.34] //> 7
  Twinkle( iFrame ,"HIP 17579" ,"#00cccc" ,4 ,dNow_jd );  //> ,[8  ,124.5944 ,40.92313 ,"Pleiades: Asterope" ,"HR 1151" ,"P"  ,"Tau" ,"Asterope"         ,"HIP 17579" ,4.567966892 ,59.74484169 ,24.55548105 ,56.482481616 ,5.75] //> 9  HR 1151   17579   21 Tau  Tau     These names were individually applied in Renaissance times from a family of characters in Greek mythology: Atlas, Pleione and their seven daughters, the Pleiades.
  Twinkle( iFrame ,"HIP 17573" ,"#00cccc" ,4 ,dNow_jd );  //> ,[9  ,121.0292 ,48.75188 ,"Pleiades: Maia"     ,"HR 1149" ,"P"  ,"Tau" ,"Maia"             ,"HIP 17573" ,4.389866533 ,59.68549106 ,24.36871969 ,56.462195999 ,3.84] //> 10
  Twinkle( iFrame ,"HIP 17702" ,"#00cccc" ,4 ,dNow_jd );  //> ,[11 ,112.4277 ,54.75468 ,"Pleiades: Alcyone"  ,"HR 1165" ,"P"  ,"Tau" ,"Alcyone"          ,"HIP 17702" ,4.050899728 ,59.99748894 ,24.10618542 ,56.876600512 ,2.84] //> 12
  Twinkle( iFrame ,"HIP 17499" ,"#00cccc" ,4 ,dNow_jd );  //> ,[12 ,128.7177 ,58.49874 ,"Pleiades: Electra"  ,"HR 1142" ,"P"  ,"Tau" ,"Electra"          ,"HIP 17499" ,4.189786908 ,59.41698059 ,24.11439627 ,56.224319838 ,3.70] //> 13
  Twinkle( iFrame ,"HIP 17608" ,"#00cccc" ,4 ,dNow_jd );  //> ,[13 ,120.2459 ,61.54713 ,"Pleiades: Merope"   ,"HR 1156" ,"P"  ,"Tau" ,"Merope"           ,"HIP 17608" ,3.955643081 ,59.70436670 ,23.94927508 ,56.587017801 ,4.09] //> 14
  Twinkle( iFrame ,"HIP 18246" ,"#00cccc" ,4 ,dNow_jd );  //> ,[10 ,131.831  ,50.85698 ,"Atik"               ,"HR 1203" ,"p"  ,"Per" ,"ζ Per"            ,"HIP 18246" ,11.33393540 ,63.12917675 ,31.88515447 ,58.538914573 ,2.80] //> 11
//Twinkle( iFrame ,            ,"#00cccc" ,4 ,dNow_jd );  //> ,[12 ,128.7177 ,58.49874 ,"????????"
  Twinkle( iFrame ,"HIP 13209" ,"#00cccc" ,4 ,dNow_jd );  //> ,[18 ,123.5546 ,81.93696 ,"Bahrani"            ,"HR 838"  ,"p"  ,"Ari" ,"Bharani"          ,"HIP 13209" ,10.44940709 ,48.20824285 ,27.26160756 ,42.501043704 ,3.59] //> 19 HR 838   6193    41  Ari Ari
  Twinkle( iFrame ,"HIP 13254" ,"#00cccc" ,4 ,dNow_jd );  //> ,[19 ,141.7191 ,78.15144 ,""                   ,"HR 840"  ,"p"  ,"Per" ,"16 Per"           ,"HIP 13254" ,20.94327211 ,51.84192759 ,38.32052223 ,42.653086066 ,4.20] //> 20
  Twinkle( iFrame ,"HIP 9884"  ,"#00cccc" ,4 ,dNow_jd );  //> ,[21 ,119.1031 ,102.6168 ,"Hamal"              ,"HR 617"  ,"p"  ,"Ari" ,"Hamal"            ,"HIP 9884"  ,9.964961307 ,37.66700911 ,23.46380209 ,31.797982866 ,2   ] //> 22 HR 617   9884    α Ari   Ari     Applied in recent times from the Arabic constellation name, al-hamal, "the Lamb", for Aries. al-hamal seems to belong to those zodiacal constellation names already known in Arabic times.
  Twinkle( iFrame ,"HIP 7884"  ,"#00cccc" ,4 ,dNow_jd );  //> ,[23 ,70.8448  ,117.6285 ,""                   ,"HR 489"  ,"p"  ,"Psc" ,"ν Psc"            ,"HIP 7884"  ,-4.69444433 ,25.50897990 ,5.488188234 ,25.360276799 ,4.45] //> 24
  Twinkle( iFrame ,"HIP 29655" ,"#00cccc" ,4 ,dNow_jd );  //> ,[24 ,-999     ,-999     ,""                   ,"HR 2216" , "g" ,"Gem" ,"Propus"           ,"HIP 29655" ,-0.88798880 ,93.44149225 ,22.50679947 ,93.725164695 ,6.00] //> 27 HR 437   7097    η Psc   Psc              HR 2216        29655   η Gem   Gem     Applied in Renaissance times from the Greek word πρόπους, "forward foot", used by Ptolemy in the Almagest in describing this star.      Greek   Kunitzsch, Paul; Smart, Tim (2006). A Dictionary of Modern star Names: A Short Guide to 254 Star Names and Their Derivations (2nd rev. ed.). Cambridge, Massachusetts: Sky Pub.
  Twinkle( iFrame ,"HIP 7097"  ,"#00cccc" ,4 ,dNow_jd );  //> ,[24 ,95.72604 ,118.7353 ,"Alpherg"            ,"HR 437"  ,"p"  ,"Psc" ,"Alpherg"          ,"HIP 7097"  ,5.378117061 ,26.81899773 ,15.34735745 ,22.873628886 ,7.50] //> 26
  Twinkle( iFrame ,"HIP 5742"  ,"#00cccc" ,4 ,dNow_jd );  //> ,[25 ,116.5119 ,127.7836 ,""                   ,"HR 360"  ,"p"  ,"Psc" ,"φ Psc"            ,"HIP 5742"  ,15.50440164 ,26.46211602 ,24.58583222 ,18.439532440 ,4.65] //> 28
  Twinkle( iFrame ,"HIP 4889"  ,"#00cccc" ,4 ,dNow_jd );  //> ,[26 ,139.006  ,130.4405 ,""                   ,"HR 291"  ,"p"  ,"Psc" ,"σ Psc"            ,"HIP 4889"  ,23.08246361 ,27.21562523 ,31.80697757 ,15.706610523 ,5.5 ] //> 29
  Twinkle( iFrame ,"HIP 3881"  ,"#00cccc" ,4 ,dNow_jd );  //> ,[27 ,156.8717 ,121.4289 ,""                   ,"HR 226"  ,"p"  ,"And" ,"ν And"            ,"HIP 3881"  ,32.56464840 ,29.15283671 ,41.08248596 ,12.455510973 ,4.5 ] //> 30
  Twinkle( iFrame ,"HIP 4906"  ,"#00cccc" ,4 ,dNow_jd );  //> ,[29 ,85.68202 ,138.646  ,""                   ,"HR 294"  ,"p"  ,"Psc" ,"ε Psc"            ,"HIP 4906"  ,1.094383099 ,17.52672400 ,7.891193773 ,15.736929963 ,4.25] //> 34
  //> ,[14 ,154.2186 ,44.34876 ,""                   ,""        ,""                                                                                                     ] //> 15 ???
  //> ,[16 ,35.4     ,81.51411 ,""                   ,"HR 2763" , "g" ,"Gem" ,"λ Gem"            ,"HIP 35350" ,-5.63533629 ,108.7840055 ,16.53956000 ,109.52854314 ,3.55] //> 17
  //> ,[28 ,63.38372 ,133.7863 ,""                   ,"HR 392"  ,"p"  ,"Cet" ,"HIP 6432"         ,"HIP 6432"  ,-6.46643162 ,19.73315074 ,1.726187942 ,20.656586845 ,6.20] //> 32
  //> ,[28 ,-999     ,-999     ,""                   ,"HR 2287" , "g" ,"Ori" ,"HIP 30318"        ,"HIP 30318" ,-10.7591056 ,95.62021449 ,12.56987478 ,95.657125881 ,6.00] //> 33
  //> ,[30 ,101.2925 ,141.9865 ,""                   ,"HR 211"  ,"p"  ,"Psc" ,"57 Psc"           ,"HIP 3632"  ,9.642026823 ,16.77406568 ,15.47672950 ,11.638382861 ,5.34] //> 36
  //> ,[30 ,-999     ,-999     ,""                   ,"HR 1990" , "g" ,"Tau" ,"130 Tau"          ,"HIP 27338" ,-5.67742169 ,86.99949122 ,17.72921298 ,86.865201882 ,5.45] //> 37
  //> ,[32 ,171.1209 ,60.48165 ,""                   ,""        ,""                                                                                                     ] //> 32
  //> ,[33 ,173.9899 ,93.61537 ,""                   ,""        ,""                                                                                                     ] //> 33
  Twinkle( iFrame ,"Asellus Borealis" ,"circle" ,"#ff0000" , 6 );                                     //> Mark("Asellus Borealis" ,"disk" ,"#ffff00" ,3);   //> Cancer
  // TODO Check for above horizon or not for all the planets:                                         //>
  Mark( "Mercury" ,"cross" ,"#ff8800" ,13 ,dNow_jd );                                                 //>
  Mark( "Venus"   ,"cross" ,"#ff00ff" ,13 ,dNow_jd );                                                 //>
  Mark( "Mars"    ,"cross" ,"#ff0000" ,13 ,dNow_jd );                                                 //>
  Mark( "Jupiter" ,"cross" ,"#00ffff" ,13 ,dNow_jd );                                                 //>
  Mark( "Saturn"  ,"cross" ,"#0000ff" ,13 ,dNow_jd );                                                 //>
 }//MarkMajorStars////////////////////////////////////////////////////////////////////////////////////////>


 function                               Go_Frames(////////////////////////////////////////////////////////> Create animation frames.
 ){                                     //////////////////////////////////////////////////////////////////>
  Go_Frames_Setup();                                                                                    //>
  core.setObserverLocation( g_dOBSERVERlONG ,g_dOBSERVERlAT ,0 ,0 ,"Stonehenge" ,"Earth" );             //> Stonehenge = 51.17886594 ,-1.82618827   Cool location
  core.setDate( "2025-02-14T12:00:00" ,"LMST" );                                                 NAP(); //>
  let                                   dNow_jd                 = core.getJDay();                       //> Get current noon-time as a Julian Day number.
  let                                   a2dArc                  = [];                                   //> List of accumulating coordinates of Vega's path.
  let                                   a2dRise                 = [];                                   //> List of accumulating coordinates of ecliptic rising.
  let                                   a2dSet                  = [];                                   //> List of accumulating coordinates of ecliptic setting.
  let                                   mapSun                  = mapSelect("Sun" );             NAP(); //> Find the Sun...
  let                                   dSunSet_h               = mapSun[ "set-dhr" ] - 0.5;            //> Half hour before sunset.
  let                                   dSunRise_h              = mapSun[ "rise-dhr"] + 0.5;            //> Half hour after sunrise.
  let                                   mapMoon                 = mapSelect("Moon");             NAP(); //> Find the Moon...
  let                                   d0_js                   = dNow_jd + (dSunSet_h - 12)/24;        //>
  let                                   iFrame0                 = mapMoon["azimuth"];                   //> Orient view so the Moon is initially at the bottom of the view.
  let                                   dOneFrame_day         = (24 + dSunRise_h - dSunSet_h)/24./1440; //> Real-time between frames.
  for( iFrame  = 0; iFrame  < 1440; iFrame++ ){                                                         //> 60 SECOND CLIP at 24 fps, for sunset to sunrise.
   core.setJDay( dNow_jd );  
   dNow_jd = d0_js + dOneFrame_day*iFrame;                                                                //> Convert one frame to a fraction of a (Julian) day.
                                                                                                        //>
   ConstellationMgr.deselectConstellations();                                                           //> Clear constellations
   ConstellationMgr.setFlagIsolateSelected(false);                                                      //> turn off constellation
   ConstellationMgr.setFlagArt(            false);                                                      //>
   ConstellationMgr.setFlagLines(          false);                                                      //>
   core.selectObjectByName("Pluto", true);      core.selectObjectByName("", true);                      //> appear to need this to force the deselection of all the other previously selected objects
   let                                  mapSun                  = mapSelect("Sun" );                    //> Find the Moon...
   MarkerMgr.deleteAllMarkers();                                                                        //>
   LabelMgr .deleteAllLabels();                                                                         //>
                                                                                                        //>
   if(  mapSun["altitude"] <  -6.0 ){                                                                   //> Civil Night...
    let                                 mapVega                 = mapSelect("Vega");                    //>
    if( mapSun["altitude"] < -24.0 ){ 
     a2dArc[a2dArc.length] = [mapVega.azimuth ,mapVega.altitude];  

    }//if                                                                                                 //> Astronomical night + ??? (fudged to match disk. How can this be determined without a watch?)
    MarkMajorStars( iFrame ,dNow_jd );                                                                  //>
    let                                 dAlt                    = 0;                                    //> Used for above (or below) horizon.
    let                                 dAz                     = 0;                                    //> Used for above (or below) horizon.
    let                                 dGmstNow_360            = dGmst_360(dNow_jd);                   //>
    dGmstNow_360 = dMod( dGmstNow_360 + g_dOBSERVERlONG ,360. );                                        //> LabelMgr.deleteAllLabels(); LabelMgr.labelScreen( jd +"      "+ dGmstNow_360 ,400 ,200 ,true ,20 ,"#ff0000"); //> DEBUG
    let                                 isWasAbove              = 0;                                    //> Initially unknown.
    for( i_360 = 0; i_360 < 360; i_360++ ){                                                             //>
     dAlt =                        dRaHDecToAlt_360(  i_360 - dGmstNow_360 ,0        ,g_dOBSERVERlAT ); //> EQUATOR: Convert Equatorial Coordinates to Altitude
     if( 0 < dAlt ){ MarkerMgr.markerEquatorial(i_360 ,0 ,true,true ,"disk","#111111",3); }             //> Line made of series of dots, if above the horizon.
     let                                dRa_360      = dEclipticLongLatToRa_360(  i_360 ,0 ,dNow_jd  ); //> ECLIPTIC: Convert the ecliptic's coords to Equatorial Right Ascension
     let                                dDec_360     = dEclipticLongLatToDec_360( i_360 ,0 ,dNow_jd  ); //> Convert the ecliptic's coords to Equatorial Declination
     dAlt =                        dRaHDecToAlt_360(dRa_360 - dGmstNow_360 ,dDec_360 ,g_dOBSERVERlAT ); //> Convert Equatorial Coordinates to Altitude
     if( 0 < dAlt ){                                                                                    //> If not below the horizon:
      MarkerMgr.markerEquatorial(  dRa_360 ,dDec_360                                                    //> Dots marking the ecliptic.
      ,                            true                                                                 //> j2000epoch
      ,                            true                                                                 //> visible
      ,                            "disk"                                                               //> symbol
      ,                            (i_360%12 < 6)?"#002255" :"#444400"                                  //> color
      ,                            3                                                                    //> size
      ,                            false                                                                //> autodelete
      ,                            0                                                                    //> autoDeleteTimeout
      ,                            false                                                                //> withAbberation
      );                                                                                                //> .
                                                                                                        //>
      if(       0 == isWasAbove     ){ isWasAbove =  1;                                                 //>
      }else if(      isWasAbove < 0 ){ isWasAbove =  1;                                                 //>
       a2dSet[ a2dSet .length] = [ dRaHDecToAz_360( dRa_360 - dGmstNow_360 ,dDec_360 ,g_dOBSERVERlAT )  //>
                                 , 0                                                                    //>
                                 ];                                                                     //>
      }//if                                                                                             //>
     }else{                                                                                             //>
      if(       0 == isWasAbove     ){ isWasAbove = -1;                                                 //>
      }else if(  0 < isWasAbove     ){ isWasAbove = -1;                                                 //>
       a2dRise[a2dRise.length] = [ dRaHDecToAz_360( dRa_360 - dGmstNow_360                              //>
                                   ,                dDec_360                                            //>
                                   ,                g_dOBSERVERlAT                                      //>
                                   )                                                                    //>
                                 , 0                                                                    //>
                                 ];                                                                     //>
   }}}}//if//if//for i_360//if                                                                          //>
   let                                  j                       = 0;                                    //>
   let                                  dSum_day                = 0;                                    //>
   for( j = 0; j < a2dArc.length ; j++ ){                                                               //> Vega Arc:
    MarkerMgr .markerHorizon( a2dArc[ j][0] ,a2dArc[j][1]      ,true,"disk","#ffff00" ,2 ,false,0) ;    //> Create a marker with horizontal coordinates.
    dSum_day += dOneFrame_day;                                                                          //>
    if( 0 < dSum_day ){                                                                                 //>
     dSum_day -= 4./24./60.;                                                                            //>
     MarkerMgr.markerHorizon( a2dArc[ j][0] ,a2dArc[j][1] +0.7 ,true,"disk","#00cc00" ,2 ,false,0) ;    //> Create a tick inside the curve.
   }}//if//for j                                                                                        //>
                                                                                                        //>
   var                                  dSink                   = -2.;                                  //>
   for( j = 0; j < a2dRise.length; j++ ){                                                               //> East Arc
    MarkerMgr.markerHorizon( a2dRise[j][0]                      + g_dOBSERVERlONG                       //> Create a marker with horizontal coordinates (plus fudge factor?)
//  ,                        a2dRise[j][1] + dSink                                                      //> below the horizon, and sinking so we can see it turn
    ,                        dSink                                                                      //> below the horizon, and sinking so we can see it turn
    ,                        true,"disk","#ffff00" ,4 ,false,0                                          //> 
    );                                                                                                  //> .
    dSink -= (  90 - a2dRise[j][0] )*(  90 - a2dRise[j][0] )*0.000017;                                  //>
   }//for j                                                                                             //>
   dSink = -2.;                                                                                         //>
   for( j = 0; j < a2dSet.length ; j++ ){                                                               //> West Arc:
    MarkerMgr.markerHorizon( a2dSet[ j][0]                      + g_dOBSERVERlONG                       //> Create a marker with horizontal coordinates (plus fudge factor?)
//  ,                        a2dSet[ j][1] + dSink                                                      //> below the horizon, and sinking so we can see it turn
    ,                        dSink                                                                      //> below the horizon, and sinking so we can see it turn
    ,                        true,"disk","#0000ff" ,6 ,false,0                                          //>
    );                                                                                                  //> .
    dSink -= ( 270 - a2dSet[ j][0] )*( 270 - a2dSet[ j][0] )*0.000017;                                  //>
   }//for j                                                                                             //>
                                                                                                        //>
//. if( mapSun["altitude"] < -6.0 ){                                                                    //> Look at Seven Sisters, sky view, slow.
//.     mapSelect("Alhena"   ); // Gemini                                                               //> Reselect stars to turn on constellations:
//. //  mapSelect("Procyon"  ); // Canis Minor                                                          //>
//. //  mapSelect("Aldebaran"); // Taurus                                                               //>
//. ////mapSelect("Capella"  ); //                                                                      //>
//. //  mapSelect("Alnitak"  ); // Orion                                                                //>
//. //  mapSelect("Hamal"    ); // Aries                                                                //>
//. //  mapSelect("Alpherg"  ); // Pisces                                                               //>
//. //  mapSelect("Mirfak"   ); // Perseus                                                              //>
//. //  mapSelect("Regulus"  ); // Leo                                                                  //>
//. //  mapSelect("Vega"     );                                                                         //>
//. }//if                                                                                               //>
//*    let                                  mapMoon                 = mapSelect("Moon");                //> Find the Moon...
//*    core.wait(0.1);                                                                                  //>
//*    core.selectObjectByName("" ,false);                                                              //> Deselect current selected sky object (to get rid of info display).
//* // Look( 90 ,mapMoon["azimuth"]   ,200 ,0 );                                                        //> Orient view so we are looking at the Moon.
   Look( 90 ,iFrame0 + iFrame/4   ,200 ,0 );                                                            //> Orient view so we are looking at the Moon.
                                                                                                        //>
   core.wait(1);                                                                                        //> Plenty of extra time to let everything settle (what a pain).
   Snap(   "S"+( ""+(100000 + iFrame) ).substr(-4)   );                                                 //> Take screen-shot. 24*60 = 1440
  }//for iFrame                                                                                         //>
//core.output("Frames 518"     );                                                                       //>
 }//Go_Frames/////////////////////////////////////////////////////////////////////////////////////////////>


 function                               Go(///////////////////////////////////////////////////////////////> Create screen snapshots of celestial sphere with various features turned on one-at-a-time.
 ){                                     //////////////////////////////////////////////////////////////////>
  core.resetOutput();                                                                                   //> Clear output file buffer.
//Reset();                                                                                              //> Clear Stellarium to known state.
                                                                                                        //>
  core.setObserverLocation( g_dOBSERVERlONG ,g_dOBSERVERlAT ,0 ,0 ,"Stonehenge" ,"Earth" );             //> Stonehenge = 51.17886594 ,-1.82618827   Cool location
  core.setTimezone("LMST" ,1);                                                                          //> "LMST" = Local Mean Solar Time    https://stellarium.org/doc/23.0/classStelMainScriptAPI.html#abc7e6a709ec2670b6581ce4b51db3185
  core.setDate( "2026-12-21T00:00:00" ,"LMST" );                                                NAP();  //> Winter solstice, midnight.
  let                                   nDay                    = Math.floor( core.getJDay() );         //> Get the count of days, the noon before midnight.
                                                                                                        //>
  if(      "ALIGNMENTS" == g_isVERSION ){ core.output("-----> Alignments" );  Go_NebraAlignments();   } //> Generate PNGs suitable for alignment analysis in InkScape, for example.
  else if( "FRAMES"     == g_isVERSION ){ core.output("-----> Frames"     );  Go_Frames();            } //> Generate PNGs suitable for animation, using ffmpeg to convert to a video format.
  else if( "TESTS"      == g_isVERSION ){ core.output("-----> TESTS"      );  Go_TESTS();             } //> Generate PNGs suitable for animation, using ffmpeg to convert to a video format.
                                                                                                        //>
  core.output("Th-th-that's all folks." );                                                              //>
  core.saveOutputAs( g_sPATHsHOTS + "output.txt" );                                                     //> Write results to file system, same directory as the screen shots.
}//Go(){}/////////////////////////////////////////////////////////////////////////////////////////////////>


Go();


//////////////////////////////////////////////////////////////////////////////////////////////////////////>
//////////////////////////////////////////////////////////////////////////////////////////////////////////>
//////////////////////////////////////////////////////////////////////////////////////////////////////////>



function                                TEST_dRaHDecToAlt_360(////////////////////////////////////////////> Convert Equatorial Coordinates to Visible Altitude
){                                      //////////////////////////////////////////////////////////////////>
  let dRa  = 0;                                                                                         //>
  let dDec = 0;                                                                                         //>
  core.output(   "RaDecToAz "+ dRaHDecToAz_360(  90 ,0 ,51.2 )   );                                     //>
  core.output(   "RaDecToAz "+ dRaHDecToAz_360( 105 ,0 ,51.2 )   );                                     //>
return "*";                                                                                             //>
}//TEST_dRaHDecToAlt_360//////////////////////////////////////////////////////////////////////////////////>
function                                TEST_dEquRahDecToAlt_360(/////////////////////////////////////////> Convert Equatorial Coordinates to Visible Altitude
){                                      //////////////////////////////////////////////////////////////////>
  core.output(   "RaDecToAlt "+ dRaHDecToAlt_360(  90 ,0 ,51.2 )   );                                   //>
  core.output(   "RaDecToAlt "+ dRaHDecToAlt_360( 105 ,0 ,51.2 )   );                                   //>
return "*";                                                                                             //>
}//TEST_dEquRahDecToAlt_360///////////////////////////////////////////////////////////////////////////////>


function                                Go_TESTS(/////////////////////////////////////////////////////////>
){                                      //////////////////////////////////////////////////////////////////>
 let                                    s                       = "";                                   //>
 s = TEST_dEclipticsRA_360(   ); if( "" != s  ){ core.output("What? "+ s);                             return s;}//>
 s = TEST_dRaHDecToAlt_360(   ); if( "" != s  ){ core.output("TEST_dRaHDecToAlt_360  FAILURE: "  + s); return s;}//>
 s = TEST_dEquRahDecToAlt_360(); if( "" != s  ){ core.output("TEST_dEquRahDecToAlt_360 FAILURE: "+ s); return s;}//>
 core.output("OK Go_TESTS");                                                                            //>
return s;                                                                                               //>
}//Go_TESTS///////////////////////////////////////////////////////////////////////////////////////////////>


//End of file
